{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { useGestureResponder } from \"react-gesture-responder\";\nimport { animated, useSpring } from \"react-spring\";\nimport { useMeasure } from \"./use-measure\";\nimport useScrollLock from \"use-scroll-lock\";\nimport { usePrevious } from \"./use-previous\";\n\nvar Pager = function (_a, ref) {\n  var children = _a.children,\n      id = _a.id,\n      providedIndex = _a.value,\n      onRequestChange = _a.onRequestChange,\n      _b = _a.focusOnChange,\n      focusOnChange = _b === void 0 ? false : _b,\n      _c = _a.enableScrollLock,\n      enableScrollLock = _c === void 0 ? true : _c,\n      _d = _a.enableGestures,\n      enableGestures = _d === void 0 ? true : _d,\n      _e = _a.enableMouse,\n      enableMouse = _e === void 0 ? false : _e,\n      _f = _a.lazyLoad,\n      lazyLoad = _f === void 0 ? false : _f,\n      onSetLazy = _a.onSetLazy,\n      _g = _a.animationConfig,\n      animationConfig = _g === void 0 ? {\n    tension: 190,\n    friction: 20,\n    mass: 0.4\n  } : _g,\n      onTerminationRequest = _a.onTerminationRequest,\n      onMoveShouldSet = _a.onMoveShouldSet,\n      style = _a.style,\n      other = tslib_1.__rest(_a, [\"children\", \"id\", \"value\", \"onRequestChange\", \"focusOnChange\", \"enableScrollLock\", \"enableGestures\", \"enableMouse\", \"lazyLoad\", \"onSetLazy\", \"animationConfig\", \"onTerminationRequest\", \"onMoveShouldSet\", \"style\"]);\n\n  var _h = typeof providedIndex === \"number\" ? {\n    immediate: false,\n    index: providedIndex\n  } : providedIndex,\n      immediate = _h.immediate,\n      index = _h.index;\n\n  var containerRef = React.useRef(null);\n\n  var _j = React.useState(false),\n      isDragging = _j[0],\n      setIsDragging = _j[1];\n\n  var _k = React.useState(function () {\n    return new Set(onSetLazy ? onSetLazy(index) : [index]);\n  }),\n      loaded = _k[0],\n      setLoaded = _k[1];\n\n  var width = useMeasure(containerRef).width;\n  var childrenRefs = React.useRef(new Map());\n  var previousIndex = usePrevious(index);\n  var shouldFocusRef = React.useRef(null);\n  useScrollLock(isDragging && enableScrollLock);\n  React.useEffect(function () {\n    if (typeof previousIndex === \"number\" && previousIndex !== index) {\n      shouldFocusRef.current = index;\n    } else {\n      shouldFocusRef.current = null;\n    }\n  }, [previousIndex, index]);\n\n  function focusByIndex(i) {\n    var el = childrenRefs.current.get(i);\n\n    if (el) {\n      el.focus();\n    }\n  } // expose an imperative focus function which focuses\n  // the currently active index\n\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function (i) {\n        focusByIndex(i || index);\n      }\n    };\n  });\n\n  var _l = useSpring(function () {\n    return {\n      x: index * -100,\n      config: animationConfig\n    };\n  }),\n      x = _l[0].x,\n      set = _l[1];\n  /**\n   * Potentially autofocus after our animation\n   */\n\n\n  function onRest() {\n    if (typeof shouldFocusRef.current === \"number\") {\n      focusByIndex(shouldFocusRef.current);\n    }\n  }\n\n  var renderableChildren = children.filter(function (child) {\n    return child !== null;\n  }); // gesture view counts\n\n  var childCount = renderableChildren.length;\n  var maxIndex = childCount - 1;\n  var minIndex = 0;\n  /**\n   * Prevent invalid indexes\n   */\n\n  function isValidNextIndex(index) {\n    return index > 0 && index <= maxIndex;\n  }\n  /**\n   * We keep a set of indexes that should\n   * be loaded for lazy loading.\n   */\n\n\n  function addIndexToLoaded(index) {\n    if (!isValidNextIndex(index)) {\n      return;\n    }\n\n    var indexes = index; // allow the user to customize which indexes to load\n\n    if (onSetLazy) {\n      indexes = onSetLazy(index);\n    }\n\n    var indexesArray = Array.isArray(indexes) ? indexes : [indexes];\n    var next = new Set(loaded);\n    indexesArray.forEach(function (i) {\n      // don't set items which are already loaded or are invalid\n      if (loaded.has(i) || !isValidNextIndex(index)) {\n        return;\n      }\n\n      next.add(i);\n    });\n    setLoaded(next);\n  } // animate into position if our index changes\n\n\n  React.useEffect(function () {\n    set({\n      x: index * -100,\n      onRest: onRest,\n      immediate: immediate\n    });\n    loaded.add(index);\n  }, [index, immediate]);\n  /**\n   * Handle gesture end event (either touchend\n   * or pan responder termination).\n   */\n\n  function releaseToPosition(x) {\n    // if it's over 50% in either direction, move to that index.\n    // otherwise, snap back to existing index.\n    var threshold = width / 2;\n\n    if (Math.abs(x) > threshold) {\n      if (x < 0 && index < maxIndex) {\n        onRequestChange(index + 1);\n      } else if (x > 0 && index > minIndex) {\n        onRequestChange(index - 1);\n      } else {\n        set({\n          x: index * -100\n        });\n      }\n    } else {\n      // return back!\n      set({\n        x: index * -100,\n        onRest: onRest\n      });\n    }\n  }\n\n  function onTermination(_a) {\n    var delta = _a.delta;\n    setIsDragging(false);\n    releaseToPosition(delta[0]);\n  }\n\n  function onEnd(_a) {\n    var delta = _a.delta,\n        velocity = _a.velocity,\n        direction = _a.direction;\n    var x = delta[0];\n    setIsDragging(false); // 1. If the force is great enough, switch to the previous index\n\n    if (velocity > 0.2 && direction[0] > 0 && index > minIndex) {\n      return onRequestChange(index - 1);\n    } // or the next index, depending on direction\n\n\n    if (velocity > 0.2 && direction[0] < 0 && index < maxIndex) {\n      return onRequestChange(index + 1);\n    }\n\n    releaseToPosition(x);\n  }\n  /**\n   * Observe our pan-responder to enable gestures\n   */\n\n\n  var bind = useGestureResponder({\n    onTerminationRequest: onTerminationRequest,\n    onStartShouldSet: function () {\n      if (!enableGestures) {\n        return false;\n      }\n\n      return false;\n    },\n    onMoveShouldSet: function (state, e) {\n      var xy = state.xy,\n          initialDirection = state.initialDirection;\n\n      if (!enableGestures) {\n        return false;\n      }\n\n      var set = Math.abs(initialDirection[0]) > Math.abs(initialDirection[1]); // allow the user to tap into this component to potentially\n      // override it\n\n      if (onMoveShouldSet) {\n        return onMoveShouldSet(state, e, set);\n      }\n\n      return set;\n    },\n    onGrant: function () {\n      setIsDragging(true);\n    },\n    onMove: function (_a) {\n      var delta = _a.delta,\n          direction = _a.direction;\n      var x = delta[0];\n      var xPos = x / width * 100 + index * -100;\n      set({\n        x: xPos,\n        immediate: true,\n        onRest: function () {}\n      }); // lazy load the item we are swiping towards\n\n      addIndexToLoaded(direction[0] > 0 ? index - 1 : index + 1);\n    },\n    onRelease: onEnd,\n    onTerminate: onTermination\n  }, {\n    uid: id,\n    enableMouse: enableMouse\n  }).bind;\n  return React.createElement(\"div\", tslib_1.__assign({}, bind, {\n    ref: containerRef,\n    className: \"Gesture-view\",\n    style: tslib_1.__assign({\n      display: \"flex\",\n      flexDirection: \"column\",\n      overflow: \"hidden\",\n      width: \"100%\"\n    }, style)\n  }, other), React.createElement(animated.div, {\n    className: \"Gesture-view__animated-container\",\n    style: {\n      flexDirection: \"row\",\n      direction: \"ltr\",\n      willChange: \"transform\",\n      minHeight: 0,\n      flex: 1,\n      display: \"flex\",\n      transform: x.interpolate(function (x) {\n        return \"translateX(\" + taper(x, maxIndex * -100) + \"%)\";\n      })\n    }\n  }, renderableChildren.map(function (child, i) {\n    var styles = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: \"100%\",\n      alignSelf: \"stretch\",\n      justifyContent: \"flex-start\",\n      flexShrink: 0,\n      height: \"100%\",\n      overflow: \"hidden\",\n      outline: \"none\"\n    };\n    var props = {\n      key: i,\n      tabIndex: index === i ? 0 : -1,\n      style: styles,\n      \"aria-hidden\": i !== index,\n      ref: function (el) {\n        childrenRefs.current.set(i, el);\n      }\n    };\n    var load = !lazyLoad || index === i || loaded.has(i);\n\n    if (typeof child === \"function\") {\n      return child(props, index === i, load);\n    }\n\n    return React.createElement(\"div\", tslib_1.__assign({\n      className: \"Gesture-view__pane\"\n    }, props), load && child);\n  })));\n};\n\nexport default React.forwardRef(Pager);\n/**\n * Add some resistance when swiping in a direction\n * that doesn't contain another pane\n */\n\nfunction taper(x, maxWidth) {\n  if (x > 0) {\n    return x * 0.3;\n  }\n\n  if (x < maxWidth) {\n    var diff = x - maxWidth;\n    return x - diff * 0.7;\n  }\n\n  return x;\n}","map":null,"metadata":{},"sourceType":"module"}