{"ast":null,"code":"import { defineHidden, FluidType, is, each, isFluidValue, createInterpolator, toArray, isEqual, Globals, needsInterpolation, useForceUpdate, useIsomorphicLayoutEffect } from '@react-spring/shared';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { deprecateInterpolate } from '@react-spring/shared/deprecations';\nimport { to, createAnimatedTransform, createAnimatedStyle, frameLoop, applyAnimatedValues, getComponentProps } from '@react-spring/shared/globals';\nimport { createInterpolator as createInterpolator$1, is as is$1 } from '@react-spring/shared';\nimport React, { forwardRef, useRef } from 'react';\nconst AnimatedType = '__$AnimatedType';\n/** Returns true for `Animated` nodes. Returns false for `SpringValue` objects. */\n\nconst isAnimated = value => !!(value && value[AnimatedType]);\n\nclass Animated {\n  constructor() {\n    defineHidden(this, AnimatedType, 1);\n  }\n  /** Returns every animated number used by this node. */\n\n\n  getPayload() {\n    return this.payload || [];\n  }\n\n}\n/** The `AnimatedProps` class sets this before initializing */\n\n\nAnimated.context = null;\n\nconst isAnimationValue = value => (value && value[FluidType]) == 2;\n\nlet nextId = 1;\n/**\r\n * A kind of `FluidValue` that manages an `AnimatedValue` node.\r\n *\r\n * Its underlying value can be accessed and even observed.\r\n */\n\nclass AnimationValue {\n  constructor(key) {\n    this.key = key;\n    this.id = nextId++;\n    this._priority = 0;\n    this._children = new Set();\n    defineHidden(this, FluidType, 2);\n  }\n  /** @internal Controls the order in which animations are updated */\n\n\n  get priority() {\n    return this._priority;\n  }\n\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n\n      this._onPriorityChange(priority);\n    }\n  }\n  /** Get the current value */\n\n\n  get() {\n    // The node doesn't exist until the first update, which normally isn't an\n    // issue but it can be for tests.\n    return this.node && this.node.getValue();\n  }\n  /** Create a spring that maps our value to another value */\n\n\n  to() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return to(this, args);\n  }\n  /** @deprecated Use the `to` method instead. */\n\n\n  interpolate() {\n    deprecateInterpolate();\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return to(this, args);\n  }\n  /** @internal */\n\n\n  addChild(child) {\n    if (!this._children.size) this._attach();\n\n    this._children.add(child);\n  }\n  /** @internal */\n\n\n  removeChild(child) {\n    this._children.delete(child);\n\n    if (!this._children.size) this._detach();\n  }\n  /** @internal */\n\n\n  onParentPriorityChange(priority, _parent) {\n    // Assume we only have one parent.\n    this.priority = priority + 1;\n  }\n\n  _attach() {}\n\n  _detach() {}\n  /** Notify observers of a change to our value */\n\n\n  _onChange(value, idle) {\n    if (idle === void 0) {\n      idle = false;\n    } // Clone \"_children\" so it can be safely mutated by the loop.\n\n\n    for (const observer of Array.from(this._children)) {\n      if (is.fun(observer)) {\n        observer(value, this);\n      } else {\n        observer.onParentChange(value, idle, this);\n      }\n    }\n  }\n  /** Notify observers of a change to our priority */\n\n\n  _onPriorityChange(priority) {\n    each(this._children, observer => {\n      if (!is.fun(observer)) {\n        observer.onParentPriorityChange(priority, this);\n      }\n    });\n  }\n  /** Reset our node and the nodes of every descendant */\n\n\n  _reset(goal) {\n    this.node.reset(!this.idle, goal);\n    each(this._children, observer => {\n      if (isAnimationValue(observer)) {\n        observer._reset(goal);\n      }\n    });\n  }\n\n}\n/** An object containing `Animated` nodes */\n\n\nclass AnimatedObject extends Animated {\n  constructor(source) {\n    if (source === void 0) {\n      source = null;\n    }\n\n    super();\n    this.setValue(source);\n  }\n\n  getValue(animated) {\n    if (!this.source) return null;\n    const values = {};\n    each(this.source, (source, key) => {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated);\n      } else if (isFluidValue(source)) {\n        values[key] = source.get();\n      } else if (!animated) {\n        values[key] = source;\n      }\n    });\n    return values;\n  }\n  /** Replace the raw object data */\n\n\n  setValue(source) {\n    this.source = source;\n    this.payload = this._makePayload(source);\n  }\n\n  reset(isActive, _goal) {\n    if (this.payload) {\n      each(this.payload, node => node.reset(isActive));\n    }\n  }\n  /** Create a payload set. */\n\n\n  _makePayload(source) {\n    if (source) {\n      const payload = new Set();\n      each(source, this._addToPayload, payload);\n      return Array.from(payload);\n    }\n  }\n  /** Add to a payload set. */\n\n\n  _addToPayload(source) {\n    if (isFluidValue(source)) {\n      if (Animated.context) {\n        Animated.context.dependencies.add(source);\n      }\n\n      if (isAnimationValue(source)) {\n        source = source.node;\n      }\n    }\n\n    if (isAnimated(source)) {\n      each(source.getPayload(), node => this.add(node));\n    }\n  }\n\n}\n\nclass AnimatedStyle extends AnimatedObject {\n  constructor(style) {\n    super(style || null);\n  }\n\n  setValue(style) {\n    super.setValue(style && style.transform && createAnimatedTransform ? _extends({}, style, {\n      transform: createAnimatedTransform(style.transform)\n    }) : style);\n  }\n\n}\n/** An animated number or a native attribute value */\n\n\nclass AnimatedValue extends Animated {\n  constructor(_value) {\n    super();\n    this._value = _value;\n    this.done = true;\n\n    if (is.num(this._value)) {\n      this.lastPosition = this._value;\n    }\n  }\n\n  static create(from, _to) {\n    return new AnimatedValue(from);\n  }\n\n  getPayload() {\n    return [this];\n  }\n\n  getValue() {\n    return this._value;\n  }\n  /**\r\n   * Set the current value and optionally round it.\r\n   *\r\n   * The `step` argument does nothing whenever it equals `undefined` or `0`.\r\n   * It works with fractions and whole numbers. The best use case is (probably)\r\n   * rounding to the pixel grid with a step of:\r\n   *\r\n   *      1 / window.devicePixelRatio\r\n   */\n\n\n  setValue(value, step) {\n    if (is.num(value)) {\n      this.lastPosition = value;\n\n      if (step) {\n        value = Math.round(value / step) * step;\n\n        if (this.done) {\n          this.lastPosition = value;\n        }\n      }\n    }\n\n    if (this._value === value) {\n      return false;\n    }\n\n    this._value = value;\n    return true;\n  }\n\n  reset(isActive, _goal) {\n    this.done = false;\n\n    if (is.num(this._value)) {\n      this.elapsedTime = 0;\n      this.lastPosition = this._value;\n      if (!isActive) this.lastVelocity = null;\n      this.v0 = null;\n    }\n  }\n\n}\n/**\r\n * `Into` springs are memoized interpolators that react to their dependencies.\r\n *  The memoized result is updated whenever a dependency changes.\r\n */\n\n\nclass Into extends AnimationValue {\n  constructor(\n  /** The source of input values */\n  source, args) {\n    super();\n    this.source = source;\n    this.calc = createInterpolator(...args);\n    this.node = new AnimatedValue(this._compute());\n  }\n\n  get idle() {\n    return this.node.done;\n  }\n\n  _compute() {\n    const inputs = is.arr(this.source) ? this.source.map(node => node.get()) : toArray(this.source.get());\n    return this.calc(...inputs);\n  }\n\n  _attach() {\n    // Start observing our \"source\" once we have an observer.\n    let priority = 0;\n    each(toArray(this.source), source => {\n      priority = Math.max(priority, (source.priority || 0) + 1);\n      source.addChild(this);\n    });\n    this.priority = priority;\n  }\n\n  _detach() {\n    // Stop observing our \"source\" once we have no observers.\n    each(toArray(this.source), source => {\n      source.removeChild(this);\n    });\n  }\n  /** @internal */\n\n\n  onParentChange(_value, idle) {\n    const node = this.node;\n\n    if (idle && !node.done) {\n      // We're not idle until every source is idle.\n      node.done = toArray(this.source).every(source => !isAnimationValue(source) || source.idle);\n    } // TODO: only compute once per frame (note: we'll need to call \"onParentChange\")\n\n\n    const value = this._compute();\n\n    if (!isEqual(value, this.get())) {\n      node.setValue(value);\n\n      this._onChange(value, node.done);\n    }\n  }\n  /** @internal */\n\n\n  onParentPriorityChange(_priority) {\n    // Set our priority to 1 + the highest parent.\n    this.priority = toArray(this.source).reduce((max, source) => Math.max(max, (source.priority || 0) + 1), 0);\n  }\n\n}\n\nGlobals.assign({\n  to: (source, args) => new Into(source, args),\n  createAnimatedStyle: style => new AnimatedStyle(style)\n});\n\nclass AnimatedString extends AnimatedValue {\n  constructor(from, to) {\n    super(0);\n    this._string = null;\n    this._toString = createInterpolator$1({\n      output: [from, to]\n    });\n  }\n\n  static create(from, to) {\n    if (to === void 0) {\n      to = from;\n    }\n\n    if (is$1.str(from) && is$1.str(to)) {\n      return new AnimatedString(from, to);\n    }\n\n    throw TypeError('Expected \"from\" and \"to\" to be strings');\n  }\n\n  getValue() {\n    let value = this._string;\n    return value == null ? this._string = this._toString(this._value) : value;\n  }\n\n  setValue(value) {\n    if (!is$1.num(value)) {\n      this._string = value;\n      this._value = 1;\n    } else if (super.setValue(value)) {\n      this._string = null;\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  reset(isActive, goal) {\n    if (goal) {\n      this._toString = createInterpolator$1({\n        output: [this.getValue(), goal]\n      });\n    }\n\n    this._value = 0;\n    super.reset(isActive);\n  }\n\n}\n/** An array of animated nodes */\n\n\nclass AnimatedArray extends AnimatedObject {\n  constructor(from, to) {\n    super(null);\n    super.setValue(this._makeAnimated(from, to));\n  }\n\n  static create(from, to) {\n    return new AnimatedArray(from, to);\n  }\n\n  getValue() {\n    return this.source.map(node => node.getValue());\n  }\n\n  setValue(newValue) {\n    const payload = this.getPayload(); // Reuse the payload when lengths are equal.\n\n    if (newValue && newValue.length == payload.length) {\n      each(payload, (node, i) => node.setValue(newValue[i]));\n    } else {\n      // Remake the payload when length changes.\n      this.source = this._makeAnimated(newValue);\n      this.payload = this._makePayload(this.source);\n    }\n  }\n  /** Convert the `from` and `to` values to an array of `Animated` nodes */\n\n\n  _makeAnimated(from, to) {\n    if (to === void 0) {\n      to = from;\n    }\n\n    return from ? from.map((from, i) => (needsInterpolation(from) ? AnimatedString : AnimatedValue).create(from, to[i])) : [];\n  }\n\n}\n\nclass AnimatedProps extends AnimatedObject {\n  constructor(update) {\n    super(null);\n    this.update = update;\n    /** Equals true when a re-render is scheduled for \"end of frame\" */\n\n    this.dirty = false;\n  }\n\n  setValue(props, context) {\n    if (!props) return; // The constructor passes null.\n\n    if (context) {\n      Animated.context = context;\n    }\n\n    super.setValue(props.style && createAnimatedStyle ? _extends({}, props, {\n      style: createAnimatedStyle(props.style)\n    }) : props);\n    Animated.context = null;\n  }\n  /** @internal */\n\n\n  onParentChange() {\n    if (!this.dirty) {\n      this.dirty = true;\n      frameLoop.onFrame(() => {\n        this.dirty = false;\n        this.update();\n      });\n    }\n  }\n  /** @internal */\n\n\n  onParentPriorityChange() {}\n\n}\n\nconst cacheKey = Symbol.for('AnimatedComponent');\n\nconst withAnimated = Component => is.str(Component) ? createAnimatedComponent(Component) : Component[cacheKey] || (Component[cacheKey] = createAnimatedComponent(Component));\n\nconst createAnimatedComponent = Component => forwardRef((rawProps, ref) => {\n  const instanceRef = useRef(null);\n  const hasInstance = // Function components must use \"forwardRef\" to avoid being\n  // re-rendered on every animation frame.\n  !is.fun(Component) || Component.prototype.isReactComponent;\n  const forceUpdate = useForceUpdate();\n  const props = new AnimatedProps(() => {\n    const instance = instanceRef.current;\n\n    if (hasInstance && !instance) {\n      return; // The wrapped component forgot to forward its ref.\n    }\n\n    const didUpdate = instance ? applyAnimatedValues(instance, props.getValue(true)) : false; // Re-render the component when native updates fail.\n\n    if (didUpdate === false) {\n      forceUpdate();\n    }\n  });\n  const dependencies = new Set();\n  props.setValue(rawProps, {\n    dependencies\n  });\n  useIsomorphicLayoutEffect(() => {\n    each(dependencies, dep => dep.addChild(props));\n    return () => each(dependencies, dep => dep.removeChild(props));\n  });\n  return React.createElement(Component, Object.assign({}, getComponentProps(props.getValue()), {\n    ref: hasInstance && (value => {\n      instanceRef.current = updateRef(ref, value);\n    })\n  }));\n});\n\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is.fun(ref)) ref(value);else ref.current = value;\n  }\n\n  return value;\n}\n/**\r\n * Pass the given components to `withAnimated` and add the newly animated\r\n * components to `withAnimated` as properties.\r\n */\n\n\nconst extendAnimated = (withAnimated, components, lowercase) => {\n  components.forEach(Component => {\n    let key = getDisplayName(Component);\n\n    if (lowercase) {\n      key = key[0].toLowerCase() + key.slice(1);\n    }\n\n    withAnimated[key] = withAnimated(Component);\n  });\n  return withAnimated;\n};\n\nconst getDisplayName = arg => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;\n\nexport { Animated, AnimatedArray, AnimatedObject, AnimatedProps, AnimatedString, AnimatedStyle, AnimatedType, AnimatedValue, AnimationValue, Into, extendAnimated, isAnimated, isAnimationValue, withAnimated };","map":null,"metadata":{},"sourceType":"module"}