{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { isMouseEnabled } from \"./mouse-enabled\";\nvar initialState = {\n  time: Date.now(),\n  xy: [0, 0],\n  delta: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  direction: [0, 0],\n  initialDirection: [0, 0],\n  local: [0, 0],\n  lastLocal: [0, 0],\n  velocity: 0,\n  distance: 0\n};\nvar defaultConfig = {\n  enableMouse: true\n};\nvar grantedTouch = null;\nexport function useGestureResponder(options, config) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (config === void 0) {\n    config = {};\n  }\n\n  var state = React.useRef(initialState);\n\n  var _a = tslib_1.__assign({}, defaultConfig, config),\n      uid = _a.uid,\n      enableMouse = _a.enableMouse;\n\n  var id = React.useRef(uid || Math.random());\n  var pressed = React.useRef(false); // update our callbacks when they change\n\n  var callbackRefs = React.useRef(options);\n  React.useEffect(function () {\n    callbackRefs.current = options;\n  }, [options]);\n  /**\n   * Attempt to claim the active touch\n   */\n\n  function claimTouch(e) {\n    if (grantedTouch && grantedTouch.onTerminationRequest(e)) {\n      grantedTouch.onTerminate(e);\n      grantedTouch = null;\n    }\n\n    attemptGrant(e);\n  }\n  /**\n   * Attempt to claim the active touch\n   * @param e\n   */\n\n\n  function attemptGrant(e) {\n    // if a touch is already active we won't register\n    if (grantedTouch) {\n      return;\n    }\n\n    grantedTouch = {\n      id: id.current,\n      onTerminate: onTerminate,\n      onTerminationRequest: onTerminationRequest\n    };\n    onGrant(e);\n  }\n\n  function bindGlobalMouseEvents() {\n    window.addEventListener(\"mousemove\", handleMoveMouse, false);\n    window.addEventListener(\"mousemove\", handleMoveMouseCapture, true);\n    window.addEventListener(\"mouseup\", handleEndMouse);\n  }\n\n  function unbindGlobalMouseEvents() {\n    window.removeEventListener(\"mousemove\", handleMoveMouse, false);\n    window.removeEventListener(\"mousemove\", handleMoveMouseCapture, true);\n    window.removeEventListener(\"mouseup\", handleEndMouse);\n  }\n\n  function handleStartCapture(e) {\n    updateStartState(e);\n    pressed.current = true;\n    var granted = onStartShouldSetCapture(e);\n\n    if (granted) {\n      attemptGrant(e);\n    }\n  }\n\n  function handleStart(e) {\n    updateStartState(e);\n    pressed.current = true;\n    bindGlobalMouseEvents();\n    var granted = onStartShouldSet(e);\n\n    if (granted) {\n      attemptGrant(e);\n    }\n  }\n\n  function isGrantedTouch() {\n    return grantedTouch && grantedTouch.id === id.current;\n  }\n  /**\n   * Handle touchend / mouseup events\n   * @param e\n   */\n\n\n  function handleEnd(e) {\n    pressed.current = false;\n    unbindGlobalMouseEvents();\n\n    if (!isGrantedTouch()) {\n      return;\n    } // remove touch\n\n\n    grantedTouch = null;\n    onRelease(e);\n  }\n  /**\n   * Handle touchmove / mousemove capture events\n   * @param e\n   */\n\n\n  function handleMoveCapture(e) {\n    updateMoveState(e);\n\n    if (isGrantedTouch()) {\n      return;\n    }\n\n    if (onMoveShouldSetCapture(e)) {\n      claimTouch(e);\n    }\n  }\n  /**\n   * Handle touchmove / mousemove events\n   * @param e\n   */\n\n\n  function handleMove(e) {\n    if (isGrantedTouch()) {\n      onMove(e);\n      return;\n    }\n\n    if (onMoveShouldSet(e)) {\n      claimTouch(e);\n    }\n  }\n  /**\n   * When our gesture starts, should we become the responder?\n   */\n\n\n  function onStartShouldSet(e) {\n    return callbackRefs.current.onStartShouldSet ? callbackRefs.current.onStartShouldSet(state.current, e) : false;\n  }\n  /**\n   * Same as onStartShouldSet, except using capture.\n   */\n\n\n  function onStartShouldSetCapture(e) {\n    return callbackRefs.current.onStartShouldSetCapture ? callbackRefs.current.onStartShouldSetCapture(state.current, e) : false;\n  }\n  /**\n   * When our gesture moves, should we become the responder?\n   */\n\n\n  function onMoveShouldSet(e) {\n    return callbackRefs.current.onMoveShouldSet ? callbackRefs.current.onMoveShouldSet(state.current, e) : false;\n  }\n  /**\n   * Same as onMoveShouldSet, but using capture instead\n   * of bubbling.\n   */\n\n\n  function onMoveShouldSetCapture(e) {\n    return callbackRefs.current.onMoveShouldSetCapture ? callbackRefs.current.onMoveShouldSetCapture(state.current, e) : false;\n  }\n  /**\n   * The view is responding to gestures. Typically corresponds\n   * with mousedown or touchstart.\n   * @param e\n   */\n\n\n  function onGrant(e) {\n    if (callbackRefs.current.onGrant) {\n      callbackRefs.current.onGrant(state.current, e);\n    }\n  }\n  /**\n   * Update our kinematics for start events\n   * @param e\n   */\n\n\n  function updateStartState(e) {\n    var _a = e.touches && e.touches[0] ? e.touches[0] : e,\n        pageX = _a.pageX,\n        pageY = _a.pageY;\n\n    var s = state.current;\n    state.current = tslib_1.__assign({}, initialState, {\n      lastLocal: s.lastLocal || initialState.lastLocal,\n      xy: [pageX, pageY],\n      initial: [pageX, pageY],\n      previous: [pageX, pageY],\n      time: Date.now()\n    });\n  }\n  /**\n   * Update our kinematics when moving\n   * @param e\n   */\n\n\n  function updateMoveState(e) {\n    var _a = e.touches && e.touches[0] ? e.touches[0] : e,\n        pageX = _a.pageX,\n        pageY = _a.pageY;\n\n    var s = state.current;\n    var time = Date.now();\n    var x_dist = pageX - s.xy[0];\n    var y_dist = pageY - s.xy[1];\n    var delta_x = pageX - s.initial[0];\n    var delta_y = pageY - s.initial[1];\n    var distance = Math.sqrt(delta_x * delta_x + delta_y * delta_y);\n    var len = Math.sqrt(x_dist * x_dist + y_dist * y_dist);\n    var scaler = 1 / (len || 1);\n    var velocity = len / (time - s.time);\n    var initialDirection = s.initialDirection[0] !== 0 || s.initialDirection[1] !== 0 ? s.initialDirection : [delta_x * scaler, delta_y * scaler];\n    state.current = tslib_1.__assign({}, state.current, {\n      time: time,\n      xy: [pageX, pageY],\n      initialDirection: initialDirection,\n      delta: [delta_x, delta_y],\n      local: [s.lastLocal[0] + pageX - s.initial[0], s.lastLocal[1] + pageY - s.initial[1]],\n      velocity: time - s.time === 0 ? s.velocity : velocity,\n      distance: distance,\n      direction: [x_dist * scaler, y_dist * scaler],\n      previous: s.xy\n    });\n  }\n  /**\n   * The user is moving their touch / mouse.\n   * @param e\n   */\n\n\n  function onMove(e) {\n    if (pressed.current && callbackRefs.current.onMove) {\n      callbackRefs.current.onMove(state.current, e);\n    }\n  }\n  /**\n   * The responder has been released. Typically mouse-up or\n   * touchend events.\n   * @param e\n   */\n\n\n  function onRelease(e) {\n    var s = state.current;\n    state.current = tslib_1.__assign({}, state.current, {\n      lastLocal: s.local\n    });\n\n    if (callbackRefs.current.onRelease) {\n      callbackRefs.current.onRelease(state.current, e);\n    }\n\n    grantedTouch = null;\n  }\n  /**\n   * Check with the current responder to see if it can\n   * be terminated. This is currently only triggered when returns true\n   * from onMoveShouldSet. I can't really envision much of a\n   * use-case for doing this with a standard onStartShouldSet.\n   *\n   * By default, returns true.\n   */\n\n\n  function onTerminationRequest(e) {\n    return callbackRefs.current.onTerminationRequest ? callbackRefs.current.onTerminationRequest(state.current, e) : true;\n  }\n  /**\n   * The responder has been taken by another view\n   */\n\n\n  function onTerminate(e) {\n    var s = state.current;\n    state.current = tslib_1.__assign({}, state.current, {\n      lastLocal: s.local\n    });\n\n    if (callbackRefs.current.onTerminate) {\n      callbackRefs.current.onTerminate(state.current, e);\n    }\n  }\n  /**\n   * Use window mousemove events instead of binding to the\n   * element itself to better emulate how touchmove works.\n   */\n\n\n  function handleMoveMouse(e) {\n    if (isMouseEnabled()) {\n      handleMove(e);\n    }\n  }\n\n  function handleMoveMouseCapture(e) {\n    if (isMouseEnabled()) {\n      handleMoveCapture(e);\n    }\n  }\n\n  function handleEndMouse(e) {\n    if (isMouseEnabled()) {\n      handleEnd(e);\n    }\n  }\n\n  React.useEffect(function () {\n    return unbindGlobalMouseEvents;\n  }, []);\n  /**\n   * Imperatively terminate the current responder\n   */\n\n  function terminateCurrentResponder() {\n    if (grantedTouch) {\n      grantedTouch.onTerminate();\n      grantedTouch = null;\n    }\n  }\n  /**\n   * A getter for returning the current\n   * responder, if it exists\n   */\n\n\n  function getCurrentResponder() {\n    return grantedTouch;\n  }\n  /**\n   * Required touch / mouse events\n   */\n\n\n  var touchEvents = {\n    onTouchStart: handleStart,\n    onTouchEnd: handleEnd,\n    onTouchMove: handleMove,\n    onTouchStartCapture: handleStartCapture,\n    onTouchMoveCapture: handleMoveCapture\n  };\n  var mouseEvents = enableMouse ? {\n    onMouseDown: function (e) {\n      if (isMouseEnabled()) {\n        handleStart(e);\n      }\n    },\n    onMouseDownCapture: function (e) {\n      if (isMouseEnabled()) {\n        handleStartCapture(e);\n      }\n    }\n  } : {};\n  return {\n    bind: tslib_1.__assign({}, touchEvents, mouseEvents),\n    terminateCurrentResponder: terminateCurrentResponder,\n    getCurrentResponder: getCurrentResponder\n  };\n}","map":null,"metadata":{},"sourceType":"module"}