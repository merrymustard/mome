{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar createInterpolator_1 = require(\"./createInterpolator\");\n\nvar colorToRgba_1 = require(\"./colorToRgba\");\n\nvar G = __importStar(require(\"./globals\")); // Problem: https://github.com/animatedjs/animated/pull/102\n// Solution: https://stackoverflow.com/questions/638565/parsing-scientific-notation-sensibly/658662\n\n\nvar numberRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g; // Covers rgb, rgba, hsl, hsla\n// Taken from https://gist.github.com/olmokramer/82ccce673f86db7cda5e\n\nvar colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi; // Covers color names (transparent, blue, etc.)\n\nvar colorNamesRegex; // rgba requires that the r,g,b are integers.... so we want to round them,\n// but we *dont* want to round the opacity (4th column).\n\nvar rgbaRegex = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi;\n\nvar rgbaRound = function rgbaRound(_, p1, p2, p3, p4) {\n  return \"rgba(\" + Math.round(p1) + \", \" + Math.round(p2) + \", \" + Math.round(p3) + \", \" + p4 + \")\";\n};\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *     \"rgba(123, 42, 99, 0.36)\"           // colors\n *     \"-45deg\"                            // values with units\n *     \"0 2px 2px 0px rgba(0, 0, 0, 0.12)\" // CSS box-shadows\n *     \"rotate(0deg) translate(2px, 3px)\"  // CSS transforms\n */\n\n\nexports.createStringInterpolator = function (config) {\n  if (!colorNamesRegex) colorNamesRegex = G.colorNames ? new RegExp(\"(\" + Object.keys(G.colorNames).join('|') + \")\", 'g') : /^\\b$/; // never match\n  // Convert colors to rgba(...)\n\n  var output = config.output.map(function (value) {\n    return value.replace(colorRegex, colorToRgba_1.colorToRgba).replace(colorNamesRegex, colorToRgba_1.colorToRgba);\n  }); // Convert [\"1px 2px\", \"0px 0px\"] into [[1, 2], [0, 0]]\n\n  var keyframes = output.map(function (value) {\n    return value.match(numberRegex).map(Number);\n  }); // Convert [\"1px 2px\", \"0px 0px\"] into [[1, 0], [2, 0]]\n\n  var outputRanges = keyframes[0].map(function (_, i) {\n    return keyframes.map(function (values) {\n      if (!(i in values)) {\n        throw Error('The arity of each \"output\" value must be equal');\n      }\n\n      return values[i];\n    });\n  }); // Create an interpolator for each animated number\n\n  var interpolators = outputRanges.map(function (output) {\n    return createInterpolator_1.createInterpolator(__assign(__assign({}, config), {\n      output: output\n    }));\n  }); // Use the first `output` as a template for each call\n\n  return function (input) {\n    var i = 0;\n    return output[0].replace(numberRegex, function () {\n      return String(interpolators[i++](input));\n    }).replace(rgbaRegex, rgbaRound);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}