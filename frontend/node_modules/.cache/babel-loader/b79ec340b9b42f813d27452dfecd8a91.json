{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport GestureView from \"react-page-controller\";\nimport { ArrowRight, ArrowLeft } from \"./Icons\";\nimport { Indicators } from \"./Indicators\";\nexport function Gallery(_a) {\n  // optionally allow the user to pass in an object\n  // with an index and animated property. This allows\n  // the user to skip to an index without animating.\n  var providedIndex = _a.index,\n      onRequestChange = _a.onRequestChange,\n      _b = _a.enableKeyboard,\n      enableKeyboard = _b === void 0 ? true : _b,\n      _c = _a.enableIndicators,\n      enableIndicators = _c === void 0 ? true : _c,\n      _d = _a.enableControls,\n      enableControls = _d === void 0 ? true : _d,\n      children = _a.children,\n      other = tslib_1.__rest(_a, [\"index\", \"onRequestChange\", \"enableKeyboard\", \"enableIndicators\", \"enableControls\", \"children\"]);\n\n  var _e = typeof providedIndex === \"number\" ? {\n    immediate: false,\n    index: providedIndex\n  } : providedIndex,\n      immediate = _e.immediate,\n      index = _e.index;\n\n  function onKeyDown(e) {\n    // left\n    if (e.keyCode === 37) {\n      if (index > 0) {\n        onRequestChange(index - 1);\n        return true;\n      } // right\n\n    } else if (e.keyCode === 39) {\n      if (index < totalChildren - 1) {\n        onRequestChange(index + 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  React.useEffect(function () {\n    if (enableKeyboard) {\n      window.addEventListener(\"keydown\", onKeyDown);\n    }\n\n    return function () {\n      return window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [index]);\n  var totalChildren = React.Children.count(children);\n  var hasPrev = index > 0;\n  var hasNext = index < totalChildren - 1;\n  var timerRef = React.useRef(null);\n\n  var _f = React.useState(false),\n      showControls = _f[0],\n      setShowControls = _f[1];\n\n  var _g = React.useState(false),\n      hover = _g[0],\n      setHover = _g[1];\n  /**\n   * Enable 'hover' based controls\n   */\n\n\n  function onMouseMove() {\n    if (!showControls) {\n      setShowControls(true);\n    }\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n\n    timerRef.current = setTimeout(function () {\n      setShowControls(false);\n    }, 2000);\n    return function () {\n      clearTimeout(timerRef.current);\n    };\n  }\n\n  function onEnter() {\n    setHover(true);\n  }\n\n  function onLeave() {\n    setHover(false);\n  }\n\n  return React.createElement(\"div\", tslib_1.__assign({\n    onMouseMove: onMouseMove,\n    className: \"GestureGallery\",\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, other), React.createElement(GestureView, {\n    enableMouse: true,\n    focusOnChange: true,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    value: providedIndex,\n    onRequestChange: onRequestChange,\n    lazyLoad: true,\n    onSetLazy: function (i) {\n      var indexes = [i];\n\n      if (i > 0) {\n        indexes.unshift(i - 1);\n      }\n\n      if (i < totalChildren) {\n        indexes.push(i + 1);\n      }\n\n      return indexes;\n    }\n  }, children), enableControls && React.createElement(React.Fragment, null, React.createElement(NavigationArrow, {\n    \"aria-label\": \"Show previous image\",\n    hidden: !hasPrev,\n    onEnter: onEnter,\n    onLeave: onLeave,\n    visible: (hover || showControls) && hasPrev,\n    onClick: function () {\n      onRequestChange(index - 1);\n    },\n    style: {\n      left: \"1rem\"\n    }\n  }, React.createElement(ArrowLeft, null)), React.createElement(NavigationArrow, {\n    \"aria-label\": \"Show next image\",\n    hidden: !hasNext,\n    visible: (hover || showControls) && hasNext,\n    onEnter: onEnter,\n    onLeave: onLeave,\n    onClick: function () {\n      onRequestChange(index + 1);\n    },\n    style: {\n      right: \"1rem\"\n    }\n  }, React.createElement(ArrowRight, null))), enableIndicators && React.createElement(Indicators, {\n    visible: true,\n    count: totalChildren,\n    index: index\n  }));\n}\nexport function NavigationArrow(_a) {\n  var hidden = _a.hidden,\n      children = _a.children,\n      label = _a[\"aria-label\"],\n      onClick = _a.onClick,\n      onEnter = _a.onEnter,\n      onLeave = _a.onLeave,\n      visible = _a.visible,\n      style = _a.style;\n  return React.createElement(\"div\", {\n    className: \"Gallery__NavigationArrow\",\n    \"aria-label\": label,\n    \"aria-hidden\": hidden,\n    onMouseEnter: onEnter,\n    onMouseLeave: onLeave,\n    style: tslib_1.__assign({\n      position: \"absolute\",\n      top: \"50%\",\n      transform: \"translateY(-50%)\",\n      transition: \"opacity 0.5s ease\",\n      opacity: visible ? 1 : 0,\n      pointerEvents: visible ? \"auto\" : \"none\"\n    }, style)\n  }, React.createElement(\"button\", {\n    onClick: onClick,\n    style: {\n      width: \"50px\",\n      height: \"50px\",\n      borderRadius: \"50%\",\n      display: \"flex\",\n      background: \"rgba(255,255,255,0.7)\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      cursor: \"pointer\",\n      border: \"none\"\n    }\n  }, children));\n}\nexport function GalleryImage(_a) {\n  var src = _a.src,\n      alt = _a.alt,\n      srcSet = _a.srcSet,\n      style = _a.style,\n      _b = _a.objectFit,\n      objectFit = _b === void 0 ? \"contain\" : _b,\n      caption = _a.caption,\n      other = tslib_1.__rest(_a, [\"src\", \"alt\", \"srcSet\", \"style\", \"objectFit\", \"caption\"]);\n\n  function onDragStart(e) {\n    e.preventDefault();\n  }\n\n  return React.createElement(\"div\", tslib_1.__assign({\n    className: \"GalleryImage\",\n    style: tslib_1.__assign({\n      flex: 1,\n      display: \"flex\",\n      overflow: \"hidden\",\n      height: \"100%\"\n    }, style)\n  }, other), React.createElement(\"img\", {\n    style: {\n      maxWidth: \"100%\",\n      height: \"auto\",\n      margin: \"0 auto\",\n      display: \"block\",\n      maxHeight: \"100%\",\n      objectFit: objectFit\n    },\n    onDragStart: onDragStart,\n    src: src,\n    srcSet: srcSet,\n    alt: alt\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}