{"ast":null,"code":"import _classCallCheck from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _regeneratorRuntime from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/mariasantosmoises/Documents/Ironhack/mome/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useIsomorphicLayoutEffect, each, is, toArray, isFluidValue, needsInterpolation, isEqual, usePrev, useOnce, useForceUpdate, Globals } from '@react-spring/shared';\nexport { Globals, createInterpolator, isFluidValue, makeFluidValue } from '@react-spring/shared';\nimport React, { useMemo as useMemo$1, useImperativeHandle, useRef } from 'react';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { frameLoop, createStringInterpolator, now, skipAnimation, requestAnimationFrame, performanceNow } from '@react-spring/shared/globals';\nimport { useMemoOne } from 'use-memo-one';\nimport { AnimationValue, isAnimationValue, AnimatedString, AnimatedValue, AnimatedArray, Into } from '@react-spring/animated';\nexport { AnimationValue, Into, isAnimationValue } from '@react-spring/animated';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { deprecateInterpolate } from '@react-spring/shared/deprecations';\nimport { createStringInterpolator as createStringInterpolator$1 } from '@react-spring/shared/stringInterpolation';\n/** API\n *  useChain(references, timeSteps, timeFrame)\n */\n\nfunction useChain(refs, timeSteps, timeFrame) {\n  if (timeFrame === void 0) {\n    timeFrame = 1000;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    if (timeSteps) {\n      var prevDelay = 0;\n      each(refs, function (ref, i) {\n        if (!ref.current) return;\n        var controllers = ref.current.controllers;\n\n        if (controllers.length) {\n          var delay = timeFrame * timeSteps[i]; // Use the previous delay if none exists.\n\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, function (ctrl) {\n            each(ctrl.queue, function (props) {\n              props.delay = delay + (props.delay || 0);\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      var p = Promise.resolve();\n      each(refs, function (ref) {\n        var _ref = ref.current || {},\n            controllers = _ref.controllers,\n            start = _ref.start;\n\n        if (controllers && controllers.length) {\n          // Take the queue of each controller\n          var updates = controllers.map(function (ctrl) {\n            var q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          }); // Apply the queue when the previous ref stops animating\n\n          p = p.then(function () {\n            each(controllers, function (ctrl, i) {\n              var _ctrl$queue;\n\n              return (_ctrl$queue = ctrl.queue).push.apply(_ctrl$queue, _toConsumableArray(updates[i]));\n            });\n            return start();\n          });\n        }\n      });\n    }\n  });\n}\n\nvar useMemo = function useMemo(create, deps) {\n  return useMemoOne(create, deps || [{}]);\n};\n\nfunction callProp(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return is.fun(value) ? value.apply(void 0, args) : value;\n}\n/** Try to coerce the given value into a boolean using the given key */\n\n\nvar matchProp = function matchProp(value, key) {\n  return value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n};\n\nvar getProps = function getProps(props, i, arg) {\n  return is.fun(props) ? props(i, arg) : is.arr(props) ? props[i] : _extends({}, props);\n};\n/** These props can have default values */\n\n\nvar DEFAULT_PROPS = ['config', 'immediate', 'onAnimate', 'onStart', 'onChange', 'onRest'];\nvar RESERVED_PROPS = {\n  children: 1,\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  reset: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  lazy: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  leave: 1,\n  update: 1,\n  onAnimate: 1,\n  onStart: 1,\n  onRest: 1,\n  onChange: 1,\n  onFrame: 1\n};\n/**\r\n * Extract any properties whose keys are *not* reserved for customizing your\r\n * animations. All hooks use this function, which means `useTransition` props\r\n * are reserved for `useSpring` calls, etc.\r\n */\n\nfunction getForwardProps(props) {\n  var forward = {};\n  each(props, function (value, prop) {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n    }\n  });\n  return forward;\n}\n\nfunction interpolateTo(props) {\n  var to = getForwardProps(props);\n  var out = {\n    to: to\n  };\n  each(props, function (val, key) {\n    return key in to || (out[key] = val);\n  });\n  return out;\n}\n/**\r\n * Start an async chain or an async script.\r\n *\r\n * You should always wrap `runAsync` calls with `scheduleProps` so that\r\n * you have access to `RunAsyncProps` instead of the usual `SpringProps`.\r\n *\r\n * The `T` parameter can be a set of animated values (as an object type)\r\n * or a primitive type for a single animated value.\r\n */\n\n\nfunction runAsync(to, props, state, getValue, getPaused, update, stop) {\n  return _regeneratorRuntime.async(function runAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!props.cancel) {\n            _context3.next = 5;\n            break;\n          }\n\n          state.asyncTo = undefined;\n          return _context3.abrupt(\"return\", {\n            value: getValue(),\n            cancelled: true\n          });\n\n        case 5:\n          if (!props.reset) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(state.promise);\n\n        case 8:\n          _context3.next = 12;\n          break;\n\n        case 10:\n          if (!(to === state.asyncTo)) {\n            _context3.next = 12;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", state.promise);\n\n        case 12:\n          state.asyncTo = to;\n          return _context3.abrupt(\"return\", state.promise = function _callee2() {\n            var asyncId, cancelToken, isCancelled, defaultProps, animate, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _props;\n\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    asyncId = props.asyncId;\n                    cancelToken = Symbol.for('cancel');\n\n                    isCancelled = function isCancelled() {\n                      return to !== state.asyncTo || asyncId <= (state.cancelId || 0);\n                    };\n\n                    defaultProps = {};\n                    each(DEFAULT_PROPS, function (prop) {\n                      if (prop == 'onRest') return;\n\n                      if (/function|object/.test(typeof props[prop])) {\n                        defaultProps[prop] = props[prop];\n                      }\n                    });\n\n                    animate = function animate(arg1, arg2) {\n                      if (isCancelled()) {\n                        throw cancelToken;\n                      }\n\n                      var props = is.obj(arg1) ? _extends({}, arg1) : _extends({}, arg2, {\n                        to: arg1\n                      });\n                      each(defaultProps, function (value, prop) {\n                        if (is.und(props[prop])) {\n                          props[prop] = value;\n                        }\n                      });\n                      var parentTo = state.asyncTo;\n                      return update(props).then(function _callee(result) {\n                        return _regeneratorRuntime.async(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                if (state.asyncTo == null) {\n                                  state.asyncTo = parentTo;\n                                }\n\n                                if (!isCancelled()) {\n                                  _context.next = 3;\n                                  break;\n                                }\n\n                                throw cancelToken;\n\n                              case 3:\n                                if (!getPaused()) {\n                                  _context.next = 7;\n                                  break;\n                                }\n\n                                _context.next = 6;\n                                return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                                  state.unpause = resolve;\n                                }));\n\n                              case 6:\n                                state.unpause = undefined;\n\n                              case 7:\n                                return _context.abrupt(\"return\", result);\n\n                              case 8:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        });\n                      });\n                    };\n\n                    _context2.prev = 6;\n\n                    if (!is.arr(to)) {\n                      _context2.next = 36;\n                      break;\n                    }\n\n                    _iteratorNormalCompletion = true;\n                    _didIteratorError = false;\n                    _iteratorError = undefined;\n                    _context2.prev = 11;\n                    _iterator = to[Symbol.iterator]();\n\n                  case 13:\n                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                      _context2.next = 20;\n                      break;\n                    }\n\n                    _props = _step.value;\n                    _context2.next = 17;\n                    return _regeneratorRuntime.awrap(animate(_props));\n\n                  case 17:\n                    _iteratorNormalCompletion = true;\n                    _context2.next = 13;\n                    break;\n\n                  case 20:\n                    _context2.next = 26;\n                    break;\n\n                  case 22:\n                    _context2.prev = 22;\n                    _context2.t0 = _context2[\"catch\"](11);\n                    _didIteratorError = true;\n                    _iteratorError = _context2.t0;\n\n                  case 26:\n                    _context2.prev = 26;\n                    _context2.prev = 27;\n\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                      _iterator.return();\n                    }\n\n                  case 29:\n                    _context2.prev = 29;\n\n                    if (!_didIteratorError) {\n                      _context2.next = 32;\n                      break;\n                    }\n\n                    throw _iteratorError;\n\n                  case 32:\n                    return _context2.finish(29);\n\n                  case 33:\n                    return _context2.finish(26);\n\n                  case 34:\n                    _context2.next = 39;\n                    break;\n\n                  case 36:\n                    if (!is.fun(to)) {\n                      _context2.next = 39;\n                      break;\n                    }\n\n                    _context2.next = 39;\n                    return _regeneratorRuntime.awrap(to(animate, stop));\n\n                  case 39:\n                    result = {\n                      value: getValue(),\n                      finished: true\n                    };\n                    _context2.next = 47;\n                    break;\n\n                  case 42:\n                    _context2.prev = 42;\n                    _context2.t1 = _context2[\"catch\"](6);\n\n                    if (!(_context2.t1 !== cancelToken)) {\n                      _context2.next = 46;\n                      break;\n                    }\n\n                    throw _context2.t1;\n\n                  case 46:\n                    result = {\n                      value: getValue(),\n                      cancelled: true\n                    };\n\n                  case 47:\n                    _context2.prev = 47;\n                    state.promise = undefined;\n\n                    if (to == state.asyncTo) {\n                      state.asyncTo = undefined;\n                    }\n\n                    return _context2.finish(47);\n\n                  case 51:\n                    if (props.onRest) {\n                      props.onRest(result);\n                    }\n\n                    return _context2.abrupt(\"return\", result);\n\n                  case 53:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[6, 42, 47, 51], [11, 22, 26, 34], [27,, 29, 33]]);\n          }());\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n} //\n// scheduleProps(props, state, action)\n//\n\n/**\r\n * Pass props to your action when any delay is finished and the\r\n * props weren't cancelled before then.\r\n */\n\n\nfunction scheduleProps(asyncId, props, state, action) {\n  return new Promise(function (resolve, reject) {\n    var delay = props.delay,\n        cancel = props.cancel,\n        reset = props.reset;\n\n    if (is.num(delay) && delay > 0) {\n      setTimeout(run, delay);\n    } else run();\n\n    function run() {\n      // Might be cancelled during delay.\n      if (asyncId <= (state.cancelId || 0)) {\n        cancel = true;\n      } else {\n        cancel = matchProp(cancel, state.key);\n\n        if (cancel) {\n          state.cancelId = asyncId;\n        }\n      }\n\n      reset = !cancel && matchProp(reset, state.key);\n\n      try {\n        action(_extends({}, props, {\n          asyncId: asyncId,\n          cancel: cancel,\n          reset: reset\n        }), resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n} // The `mass` prop defaults to 1\n\n\nvar config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n/** The spring cannot be animated */\n\nvar DISPOSED = 'DISPOSED';\n/** The spring has not animated yet */\n\nvar CREATED = 'CREATED';\n/** The spring has animated before */\n\nvar IDLE = 'IDLE';\n/** The spring is frozen in time */\n\nvar PAUSED = 'PAUSED';\n/** The spring is animating */\n\nvar ACTIVE = 'ACTIVE';\n\nvar noop = function noop() {};\n\nvar BASE_CONFIG = _extends({}, config.default, {\n  mass: 1,\n  velocity: 0,\n  progress: 0,\n  easing: function easing(t) {\n    return t;\n  },\n  clamp: false\n});\n/** An opaque animatable value */\n\n\nvar SpringValue =\n/*#__PURE__*/\nfunction (_AnimationValue) {\n  _inherits(SpringValue, _AnimationValue);\n\n  function SpringValue(key) {\n    var _this;\n\n    _classCallCheck(this, SpringValue);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpringValue).call(this, key));\n    /** The animation state */\n\n    _this.animation = {\n      value: _assertThisInitialized(_this)\n    };\n    /** The lifecycle phase of this spring */\n\n    _this._phase = CREATED;\n    /** The last time each prop changed */\n\n    _this._timestamps = {};\n    /** Some props have customizable default values */\n\n    _this._defaultProps = {};\n    /** Cancel any update from before this timestamp */\n\n    _this._lastAsyncId = 0;\n    _this._state = {\n      key: key\n    };\n    return _this;\n  }\n\n  _createClass(SpringValue, [{\n    key: \"is\",\n\n    /** Check the current phase */\n    value: function is(phase) {\n      return this._phase == phase;\n    }\n    /** Set the current value, while stopping the current animation */\n\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      if (this._set(value) && this.idle) {\n        // Since \"_stop\" calls \"_onChange\" only when not idle, we need this.\n        this._onChange(this.get(), true);\n      }\n\n      this._stop();\n\n      return this;\n    }\n    /**\r\n     * Freeze the active animation in time.\r\n     * This does nothing when not animating.\r\n     *\r\n     * Call `start` to unpause.\r\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      checkDisposed(this, 'pause');\n\n      if (!this.idle) {\n        this._phase = PAUSED;\n        frameLoop.stop(this);\n      }\n    }\n    /**\r\n     * Skip to the end of the current animation.\r\n     *\r\n     * All `onRest` callbacks are passed `{finished: true}`\r\n     */\n\n  }, {\n    key: \"finish\",\n    value: function finish(to) {\n      if (!this.idle) {\n        var anim = this.animation; // Decay animations have an implicit goal.\n\n        if (!anim.config.decay && is.und(to)) {\n          to = anim.to;\n        } // Set the value if we can.\n\n\n        if (!is.und(to)) {\n          this._set(to);\n        } // Exit the frameloop.\n\n\n        this._stop(true);\n      }\n\n      return this;\n    }\n    /** Push props into the pending queue. */\n\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      checkDisposed(this, 'update'); // Ensure the initial value can be accessed by animated components.\n\n      this.setNodeWithProps(props);\n      var queue = this.queue || (this.queue = []);\n      queue.push(props);\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(to, arg2) {\n      var _this2 = this;\n\n      var queue;\n      return _regeneratorRuntime.async(function start$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              checkDisposed(this, 'start'); // Unpause if possible.\n\n              if (this.is(PAUSED)) {\n                this._start();\n\n                if (this._state.asyncTo) {\n                  this._state.unpause();\n                }\n              }\n\n              if (!is.und(to)) {\n                queue = [is.obj(to) ? to : _extends({}, arg2, {\n                  to: to\n                })];\n              } else {\n                queue = this.queue || [];\n                this.queue = [];\n              }\n\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(Promise.all(queue.map(function (props) {\n                return _this2._animate(props);\n              })));\n\n            case 5:\n              return _context4.abrupt(\"return\", {\n                finished: true,\n                value: this.get(),\n                spring: this\n              });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n    /**\r\n     * Stop the current animation, and cancel any delayed updates.\r\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.is(DISPOSED)) {\n        this._state.cancelId = this._lastAsyncId;\n\n        this._to(this.get());\n\n        this._stop();\n      }\n\n      return this;\n    }\n    /** Restart the animation. */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._animate({\n        reset: true\n      });\n    }\n    /** Prevent future animations, and stop the current animation */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (!this.is(DISPOSED)) {\n        if (this.animation) {\n          // Prevent \"onRest\" calls when disposed.\n          this.animation.onRest = undefined;\n        }\n\n        this.stop();\n        this._phase = DISPOSED;\n      }\n    }\n    /** Observe value changes. To stop observing, call the returned function. */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(fn) {\n      var _this3 = this;\n\n      this._children.add(fn);\n\n      return function () {\n        return _this3._children.delete(fn);\n      };\n    }\n    /** @internal */\n\n  }, {\n    key: \"onParentChange\",\n    value: function onParentChange(value, idle) {\n      var anim = this.animation; // The \"FrameLoop\" handles everything other than immediate animation.\n\n      if (anim.immediate) {\n        if (idle) {\n          this.finish(value);\n        } else {\n          this._set(value);\n        }\n      } // When our parent is not a spring, it won't tell us to enter the frameloop\n      // because it never does so itself. Instead, we must react to value changes.\n      else if (this.idle) {\n          anim.fromValues = anim.values.map(function (node) {\n            return node.lastPosition;\n          });\n\n          this._start();\n        }\n    }\n    /** @internal Called by the frameloop */\n\n  }, {\n    key: \"onFrame\",\n    value: function onFrame(idle, changed) {\n      if (idle) {\n        this.finish();\n      } else if (changed) {\n        this._onChange(this.get());\n      }\n    }\n    /**\r\n     * @internal\r\n     * Analyze the given `value` to determine which data type is being animated.\r\n     * Then, create an `Animated` node for that data type and make it our `node`.\r\n     */\n\n  }, {\n    key: \"setNodeWithValue\",\n    value: function setNodeWithValue(value) {\n      if (value != null) {\n        this.node = this._getNodeType(value).create(computeGoal(value));\n      }\n    }\n    /**\r\n     * @internal\r\n     * Analyze the given `props` to determine which data type is being animated.\r\n     * Then, create an `Animated` node for that data type and make it our `node`.\r\n     * If we already have a `node`, do nothing but return the `{from, to}` range.\r\n     */\n\n  }, {\n    key: \"setNodeWithProps\",\n    value: function setNodeWithProps(props) {\n      var range = this._getRange(props);\n\n      if (!this.node) {\n        this.setNodeWithValue(range.from != null ? range.from : range.to);\n      }\n\n      return range;\n    }\n    /** Return the `Animated` node constructor for a given value */\n\n  }, {\n    key: \"_getNodeType\",\n    value: function _getNodeType(value) {\n      var parent = isAnimationValue(value) ? value : null;\n      var parentType = parent && parent.node && parent.node.constructor;\n\n      if (!parent && isFluidValue(value)) {\n        value = value.get();\n      }\n\n      return parentType == AnimatedString ? AnimatedValue : parentType || (is.arr(value) ? AnimatedArray : needsInterpolation(value) ? AnimatedString : AnimatedValue);\n    }\n    /** Pluck the `to` and `from` props */\n\n  }, {\n    key: \"_getRange\",\n    value: function _getRange(props) {\n      var to = props.to,\n          from = props.from;\n      var key = this.key || '';\n      return {\n        to: !is.obj(to) || isFluidValue(to) ? to : to[key],\n        from: !is.obj(from) || isFluidValue(from) ? from : from[key]\n      };\n    }\n    /** Update this value's animation using the given props. */\n\n  }, {\n    key: \"_animate\",\n    value: function _animate(props) {\n      var _this4 = this;\n\n      // Ensure the initial value can be accessed by animated components.\n      var range = this.setNodeWithProps(props);\n      var timestamp = now();\n      return scheduleProps(++this._lastAsyncId, props, this._state, function (props, resolve) {\n        var to = props.to;\n\n        if (is.arr(to) || is.fun(to)) {\n          resolve(runAsync(to, props, _this4._state, function () {\n            return _this4.get();\n          }, function () {\n            return _this4.is(PAUSED);\n          }, _this4.start.bind(_this4), _this4.stop.bind(_this4)));\n        } else if (props.cancel) {\n          _this4.stop();\n\n          resolve({\n            value: _this4.get(),\n            cancelled: true\n          });\n        } else {\n          _this4._update(range, props, timestamp, resolve);\n        }\n      });\n    }\n    /** Update the internal `animation` object */\n\n  }, {\n    key: \"_update\",\n    value: function _update(_ref, props, timestamp, resolve) {\n      var to = _ref.to,\n          from = _ref.from;\n      var defaultProps = this._defaultProps;\n      /** Get the value of a prop, or its default value */\n\n      var get = function get(prop) {\n        return !is.und(props[prop]) ? props[prop] : defaultProps[prop];\n      };\n\n      var onAnimate = get('onAnimate');\n\n      if (onAnimate) {\n        onAnimate(props, this);\n      } // Cast from a partial type.\n\n\n      var anim = this.animation;\n      var timestamps = this._timestamps;\n      /** Return true if our prop can be used. This only affects delayed props. */\n\n      var diff = function diff(prop) {\n        if (timestamp >= (timestamps[prop] || 0)) {\n          timestamps[prop] = timestamp;\n          return true;\n        }\n\n        return false;\n      };\n\n      var prevTo = anim.to,\n          prevFrom = anim.from; // The \"reverse\" prop only affects one update.\n\n      if (props.reverse) {\n        var _ref2 = [from, to];\n        to = _ref2[0];\n        from = _ref2[1];\n      }\n\n      if (!is.und(to) && diff('to')) {\n        this._to(to);\n      } else {\n        to = prevTo;\n      }\n\n      if (!is.und(from) && diff('from')) {\n        anim.from = from;\n      } else {\n        from = anim.from;\n      }\n\n      if (isFluidValue(from)) {\n        from = from.get();\n      }\n\n      var reset = props.reset && !is.und(from);\n      var changed = !is.und(to) && !isEqual(to, prevTo);\n      var parent = isFluidValue(to) && to;\n      /** The current value */\n\n      var value = reset ? from : this.get();\n\n      if (is.und(from)) {\n        from = value;\n      }\n      /** When true, this spring must be in the frameloop. */\n\n\n      var started = !!parent || (changed || reset) && !isEqual(value, to);\n      /** The initial velocity before this `animate` call. */\n\n      var lastVelocity = anim.config ? anim.config.velocity : 0; // The \"config\" prop either overwrites or merges into the existing config.\n\n      var config = props.config;\n\n      if (config || started || !anim.config) {\n        var key = this.key || '';\n        config = _extends({}, callProp(defaultProps.config, key), callProp(config, key));\n\n        if (!started && canMergeConfigs(config, anim.config)) {\n          Object.assign(anim.config, config);\n        } else {\n          anim.config = config = _extends({}, BASE_CONFIG, config);\n        } // Derive \"tension\" and \"friction\" from \"frequency\" and \"damping\".\n\n\n        if (!is.und(config.frequency)) {\n          var damping = is.und(config.damping) ? 1 : config.damping;\n          config.tension = Math.pow(config.frequency, 2) * config.mass;\n          config.friction = damping * Math.sqrt(config.tension * config.mass) / 0.5;\n        } // Cache the angular frequency in rad/ms\n\n\n        config.w0 = Math.sqrt(config.tension / config.mass) / 1000;\n      } else {\n        config = anim.config;\n      } // Always start animations with velocity.\n\n\n      if (!started && (config.decay || !is.und(to))) {\n        started = !isEqual(config.velocity, lastVelocity);\n      } // Reset our internal `Animated` node if starting.\n\n\n      var node = this.node;\n      var nodeType;\n\n      if (changed) {\n        nodeType = this._getNodeType(to);\n\n        if (nodeType !== node.constructor) {\n          throw Error(\"Cannot animate to the given \\\"to\\\" prop, because the current value has a different type\");\n        }\n      } else {\n        nodeType = node.constructor;\n      } // The final value of our animation, excluding the \"to\" value.\n      // The \"FrameLoop\" decides our goal value when \"parent\" exists.\n\n\n      var goal = parent ? null : computeGoal(to);\n\n      if (nodeType == AnimatedString) {\n        from = 0;\n        goal = 1;\n      } // Ensure the current value equals the \"from\" value when reset\n      // and when the \"from\" value is updated before the first animation.\n\n\n      if (reset || this.is(CREATED) && !is.und(anim.from) && !isEqual(anim.from, prevFrom)) {\n        node.setValue(value = from);\n      } // Event props are replaced on every update.\n\n\n      anim.onStart = get('onStart');\n      anim.onChange = get('onChange'); // Update the default props.\n\n      if (props.default) {\n        each(DEFAULT_PROPS, function (prop) {\n          // Default props can only be null, an object, or a function.\n          if (/function|object/.test(typeof props[prop])) {\n            defaultProps[prop] = props[prop];\n          }\n        });\n      }\n\n      if (!started) {\n        // Resolve the \"animate\" promise.\n        return resolve({\n          value: value,\n          spring: this,\n          finished: true\n        });\n      } // This must come *before* \"fromValues\" is set,\n      // because it updates \"node.lastPosition\"\n\n\n      this._reset();\n\n      anim.values = node.getPayload();\n      anim.toValues = parent ? null : toArray(goal);\n      anim.fromValues = anim.values.map(function (node) {\n        return node.lastPosition;\n      });\n      anim.immediate = !(parent || is.num(goal) || is.arr(goal)) || !!matchProp(get('immediate'), this.key);\n      var onRestQueue = anim.onRest; // The \"onRest\" prop is always first in the queue.\n\n      anim.onRest = [get('onRest') || noop, resolve]; // Resolve the promise for unfinished animations.\n\n      if (onRestQueue && onRestQueue.length > 1) {\n        var result = {\n          value: value,\n          spring: this,\n          cancelled: true\n        }; // Skip the \"onRest\" prop, as the animation is still active.\n\n        for (var i = 1; i < onRestQueue.length; i++) {\n          onRestQueue[i](result);\n        }\n      }\n\n      this._start();\n    }\n    /** Update the `animation.to` value, which might be a `FluidValue` */\n\n  }, {\n    key: \"_to\",\n    value: function _to(value) {\n      var anim = this.animation;\n\n      if (isFluidValue(anim.to)) {\n        if (value == anim.to) return;\n        anim.to.removeChild(this);\n      }\n\n      anim.to = value;\n\n      if (isFluidValue(value)) {\n        value.addChild(this);\n        this.priority = (value.priority || 0) + 1;\n      } else {\n        this.priority = 0;\n      }\n    }\n    /** Set the current value and our `node` if necessary. The `_onChange` method is *not* called. */\n\n  }, {\n    key: \"_set\",\n    value: function _set(value) {\n      if (isFluidValue(value)) {\n        value = value.get();\n      }\n\n      var node = this.node;\n\n      if (node) {\n        if (isEqual(value, node.getValue())) {\n          return false;\n        }\n\n        node.setValue(value);\n      } else {\n        this.setNodeWithValue(value);\n      }\n\n      return true;\n    }\n    /** Notify change observers */\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value, idle) {\n      if (idle === void 0) {\n        idle = false;\n      }\n\n      var anim = this.animation;\n\n      if (!anim.changed && !idle) {\n        anim.changed = true; // The \"onStart\" prop is called on the first change after entering the\n        // frameloop, but never for immediate animations.\n\n        if (anim.onStart) {\n          anim.onStart(this);\n        }\n      }\n\n      if (anim.onChange) {\n        anim.onChange(value, this);\n      }\n\n      _get(_getPrototypeOf(SpringValue.prototype), \"_onChange\", this).call(this, value, idle);\n    }\n  }, {\n    key: \"_onPriorityChange\",\n    value: function _onPriorityChange(priority) {\n      if (!this.idle) {\n        // Re-enter the frameloop so our new priority is used.\n        frameLoop.stop(this).start(this);\n      }\n\n      _get(_getPrototypeOf(SpringValue.prototype), \"_onPriorityChange\", this).call(this, priority);\n    }\n    /** Reset our node, and the nodes of every descendant spring */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset(goal) {\n      if (goal === void 0) {\n        goal = computeGoal(this.animation.to);\n      }\n\n      _get(_getPrototypeOf(SpringValue.prototype), \"_reset\", this).call(this, goal);\n    }\n    /** Enter the frameloop */\n\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      if (this.idle) {\n        this._phase = ACTIVE; // Animations without \"onRest\" cannot enter the frameloop.\n\n        var anim = this.animation;\n\n        if (anim.onRest) {\n          anim.changed = false; // The \"skipAnimation\" global avoids the frameloop.\n\n          if (skipAnimation) {\n            this.finish(anim.to);\n          } else {\n            frameLoop.start(this);\n          }\n        } // Tell animatable children to enter the frameloop.\n\n\n        each(this._children, function (child) {\n          if (child instanceof SpringValue) {\n            child._start();\n          }\n        });\n      }\n    }\n    /** Exit the frameloop and notify `onRest` listeners */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(finished) {\n      if (finished === void 0) {\n        finished = false;\n      }\n\n      if (!this.idle) {\n        this._phase = IDLE; // Always let change observers know when a spring becomes idle.\n\n        this._onChange(this.get(), true);\n\n        var anim = this.animation;\n        var onRestQueue = anim.onRest; // Animations without \"onRest\" never enter the frameloop.\n\n        if (onRestQueue) {\n          frameLoop.stop(this);\n          each(anim.values, function (node) {\n            node.done = true;\n          }); // Preserve the \"onRest\" prop between animations.\n\n          anim.onRest = [onRestQueue[0]]; // Never call the \"onRest\" prop for immediate or no-op animations.\n\n          if (anim.immediate || !anim.changed) {\n            onRestQueue[0] = noop;\n          }\n\n          var result = {\n            value: this.get(),\n            spring: this,\n            finished: finished\n          };\n          each(onRestQueue, function (onRest) {\n            return onRest(result);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"idle\",\n    get: function get() {\n      return !this.is(ACTIVE);\n    }\n  }]);\n\n  return SpringValue;\n}(AnimationValue); // TODO: makes this tree-shakeable\n\n\nfunction checkDisposed(spring, name) {\n  if (spring.is(DISPOSED)) {\n    throw Error(\"Cannot call \\\"\".concat(name, \"\\\" of disposed \\\"\").concat(spring.constructor.name, \"\\\" object\"));\n  }\n} // Merge configs when the existence of \"decay\" or \"duration\" has not changed.\n\n\nfunction canMergeConfigs(src, dest) {\n  return !!dest && is.und(src.decay) == is.und(dest.decay) && is.und(src.duration) == is.und(dest.duration);\n} // Compute the goal value, converting \"red\" to \"rgba(255, 0, 0, 1)\" in the process\n\n\nfunction computeGoal(value) {\n  return is.arr(value) ? value.map(computeGoal) : isFluidValue(value) ? computeGoal(value.get()) : needsInterpolation(value) ? createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n\nvar nextId = 1;\nvar lastAsyncId = 0;\n\nvar Controller =\n/*#__PURE__*/\nfunction () {\n  function Controller(props) {\n    _classCallCheck(this, Controller);\n\n    this.id = nextId++;\n    /** The values that changed in the last animation frame */\n\n    this.frame = {};\n    /** Fallback values for undefined props */\n\n    this.defaultProps = {};\n    /** The queue of pending props */\n\n    this.queue = [];\n    /** The current controller-only props (eg: `onFrame` and async state) */\n\n    this._props = {};\n    /** The spring values that manage their animations */\n\n    this._springs = {};\n    this._onChange = this._onChange.bind(this);\n    this._onFrame = this._onFrame.bind(this);\n\n    if (props) {\n      props.default = true;\n      this.start(props);\n    }\n  }\n  /** Equals true when no springs are animating */\n\n\n  _createClass(Controller, [{\n    key: \"get\",\n    value: function get(key) {\n      return this._springs[key];\n    }\n    /** Push an update onto the queue of each value. */\n\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      if (props) this.queue.push(this._update(props));\n      return this;\n    }\n    /**\r\n     * Start the queued animations for every spring, and resolve the returned\r\n     * promise once all queued animations have finished or been cancelled.\r\n     *\r\n     * When you pass a queue (instead of nothing), that queue is used instead of\r\n     * the queued animations added with the `update` method, which are left alone.\r\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(queue) {\n      var _this5 = this;\n\n      var promises, results;\n      return _regeneratorRuntime.async(function start$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (queue) {\n                queue = toArray(queue).map(function (props) {\n                  return _this5._update(props);\n                });\n              } else {\n                queue = this.queue;\n                this.queue = [];\n              }\n\n              promises = [];\n              each(queue, function (props) {\n                var to = props.to,\n                    onFrame = props.onFrame,\n                    keys = props.keys;\n                var asyncTo = (is.arr(to) || is.fun(to)) && to;\n\n                if (asyncTo) {\n                  props.to = undefined;\n                }\n\n                promises.push.apply(promises, _toConsumableArray(keys.map(function (key) {\n                  return _this5._springs[key].start(props);\n                })).concat([// Schedule controller-only props.\n                scheduleProps(++lastAsyncId, props, _this5._props, function (props, resolve) {\n                  if (!props.cancel) {\n                    // Never reuse \"onFrame\" from a previous update.\n                    _this5._props.onFrame = onFrame || _this5.defaultProps.onFrame;\n\n                    if (onFrame && props.default) {\n                      _this5.defaultProps.onFrame = onFrame;\n                    }\n                  } // Start, replace, or cancel the async animation.\n\n\n                  if (asyncTo) {\n                    resolve(runAsync(asyncTo, props, _this5._props, _this5._get.bind(_this5), function () {\n                      return false;\n                    }, // TODO: add pausing to Controller\n                    _this5.start.bind(_this5), _this5.stop.bind(_this5)));\n                  } else {\n                    resolve({\n                      value: 0,\n                      finished: !props.cancel\n                    });\n                  }\n                })]));\n              });\n              _context5.next = 5;\n              return _regeneratorRuntime.awrap(Promise.all(promises));\n\n            case 5:\n              results = _context5.sent;\n              return _context5.abrupt(\"return\", {\n                value: this._get(),\n                finished: results.every(function (result) {\n                  return result.finished;\n                })\n              });\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this);\n    }\n    /** Stop one animation, some animations, or all animations */\n\n  }, {\n    key: \"stop\",\n    value: function stop(keys) {\n      var _this6 = this;\n\n      if (is.und(keys)) {\n        each(this._springs, function (spring) {\n          return spring.stop();\n        });\n      } else {\n        each(toArray(keys), function (key) {\n          return _this6._springs[key].stop();\n        });\n      }\n\n      return this;\n    }\n    /** Restart every animation. */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      each(this._springs, function (spring) {\n        return spring.reset();\n      }); // TODO: restart async \"to\" prop\n\n      return this;\n    }\n    /** Destroy every spring in this controller */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._props.asyncTo = undefined;\n      each(this._springs, function (spring) {\n        return spring.dispose();\n      });\n      this._springs = {};\n    }\n    /** Get the current value of every spring */\n\n  }, {\n    key: \"_get\",\n    value: function _get() {\n      var values = {};\n      each(this._springs, function (spring, key) {\n        values[key] = spring.get();\n      });\n      return values;\n    }\n    /** Create a spring for every given key, and ensure they have `Animated` nodes. */\n\n  }, {\n    key: \"_setSprings\",\n    value: function _setSprings(keys, from, to) {\n      var _this7 = this;\n\n      each(keys, function (key) {\n        if (!_this7._springs[key]) {\n          var spring = _this7._springs[key] = new SpringValue(key);\n          spring.addChild(_this7._onChange);\n          spring.setNodeWithProps({\n            from: from,\n            to: to\n          });\n        }\n      });\n    }\n    /** Prepare an update with the given props. */\n\n  }, {\n    key: \"_update\",\n    value: function _update(propsArg) {\n      var props = interpolateTo(propsArg);\n      var keys = props.keys = extractKeys(props, this._springs);\n      var from = props.from,\n          to = props.to; // Avoid sending async \"to\" prop to springs.\n\n      if (is.arr(to) || is.fun(to)) {\n        to = undefined;\n      } // Create our springs and give them values.\n\n\n      if (from || to) {\n        this._setSprings(keys, from, to);\n      }\n\n      return props;\n    }\n    /** @internal Attached as an observer to every spring */\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value, spring) {\n      if (this._props.onFrame) {\n        this.frame[spring.key] = value;\n        frameLoop.onFrame(this._onFrame);\n      }\n    }\n    /** @internal Called at the end of every animation frame */\n\n  }, {\n    key: \"_onFrame\",\n    value: function _onFrame() {\n      if (Object.keys(this.frame).length) {\n        this._props.onFrame(this.frame);\n\n        this.frame = {};\n      }\n    }\n  }, {\n    key: \"idle\",\n    get: function get() {\n      return !this._props.promise && Object.values(this._springs).every(function (s) {\n        return s.idle;\n      });\n    }\n    /** Get all existing `SpringValue` objects. This clones the internal store. */\n\n  }, {\n    key: \"springs\",\n    get: function get() {\n      return _extends({}, this._springs);\n    }\n  }]);\n\n  return Controller;\n}();\n/** Determine which keys should receive an update */\n\n\nfunction extractKeys(props, springs) {\n  var keys = new Set();\n  /** Collect keys with a defined value */\n\n  var getDefinedKeys = function getDefinedKeys(obj) {\n    return each(obj, function (value, key) {\n      if (!is.und(value)) {\n        keys.add(key);\n      }\n    });\n  };\n\n  var from = props.from,\n      to = props.to;\n  if (is.obj(to)) getDefinedKeys(to);\n  if (from) getDefinedKeys(from); // When neither \"from\" or \"to\" have a key with a defined value,\n  // return the keys for every existing spring.\n\n  return keys.size ? Array.from(keys) : Object.keys(springs);\n}\n/** @internal */\n\n\nfunction useSprings(length, props, deps) {\n  var propsFn = is.fun(props) && props;\n\n  if (propsFn && arguments.length < 3) {\n    deps = []; // Skip updates after first render.\n  } // The \"ref\" prop is taken from the props of the first spring only.\n  // The ref is assumed to *never* change after the first render.\n\n\n  var ref;\n  var ctrls = useMemo(function () {\n    return [];\n  }, []);\n  var updates = [];\n  var prevLength = usePrev(length) || 0;\n  useMemo(function () {\n    if (prevLength > length) {\n      for (var i = length; i < prevLength; i++) {\n        ctrls[i].dispose();\n      }\n    }\n\n    ctrls.length = length;\n\n    for (var _i = 0; _i < length; _i++) {\n      var ctrl = ctrls[_i] || (ctrls[_i] = new Controller());\n\n      var _update2 = propsFn ? propsFn(_i, ctrl) : props[_i];\n\n      if (_update2) {\n        _update2.default = true;\n\n        if (_i == 0 && _update2.ref) {\n          ref = _update2.ref;\n        }\n\n        if (_i < prevLength) {\n          updates[_i] = _update2;\n        } else {\n          // Update new controllers immediately, so their\n          // spring values exist during first render.\n          ctrl.update(_update2);\n        }\n      }\n    }\n  }, deps);\n  var api = useMemo$1(function () {\n    return {\n      get controllers() {\n        return ctrls;\n      },\n\n      update: function update(props) {\n        each(ctrls, function (ctrl, i) {\n          ctrl.update(getProps(props, i, ctrl));\n          if (!ref) ctrl.start();\n        });\n        return api;\n      },\n      start: function start() {\n        var results;\n        return _regeneratorRuntime.async(function start$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _regeneratorRuntime.awrap(Promise.all(ctrls.map(function (ctrl) {\n                  return ctrl.start();\n                })));\n\n              case 2:\n                results = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  value: results.map(function (result) {\n                    return result.value;\n                  }),\n                  finished: results.every(function (result) {\n                    return result.finished;\n                  })\n                });\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        });\n      },\n      stop: function stop(keys) {\n        return each(ctrls, function (ctrl) {\n          return ctrl.stop(keys);\n        });\n      }\n    };\n  }, []);\n  useImperativeHandle(ref, function () {\n    return api;\n  });\n  useIsomorphicLayoutEffect(function () {\n    each(updates, function (update, i) {\n      return ctrls[i].update(update);\n    });\n\n    if (!ref) {\n      each(ctrls, function (ctrl) {\n        return ctrl.start();\n      });\n    }\n  }, deps);\n  useOnce(function () {\n    return function () {\n      each(ctrls, function (ctrl) {\n        return ctrl.dispose();\n      });\n    };\n  });\n  var values = ctrls.map(function (ctrl) {\n    return ctrl.springs;\n  });\n  return propsFn || arguments.length == 3 ? [values, api.update, api.stop] : values;\n}\n/** @internal */\n\n\nfunction useSpring(props, deps) {\n  var isFn = is.fun(props);\n\n  var _useSprings = useSprings(1, isFn ? props : [props], deps),\n      _useSprings$ = _useSprings[0],\n      values = _useSprings$[0],\n      update = _useSprings[1],\n      stop = _useSprings[2];\n\n  return isFn || arguments.length == 3 ? [values, update, stop] : values;\n}\n\nfunction useTrail(length, propsArg, deps) {\n  var propsFn = is.fun(propsArg) && propsArg;\n\n  if (propsFn && arguments.length < 3) {\n    deps = []; // Skip updates after first render.\n  }\n\n  var ctrls = [];\n  var result = useSprings(length, function (i, ctrl) {\n    ctrls[i] = ctrl;\n    return getProps(propsArg, i, ctrl);\n  }, deps);\n  useIsomorphicLayoutEffect(function () {\n    var reverse = is.obj(propsArg) && propsArg.reverse;\n\n    for (var i = 0; i < ctrls.length; i++) {\n      var parent = ctrls[i + (reverse ? 1 : -1)];\n      if (parent) ctrls[i].update({\n        to: parent.springs\n      }).start();\n    }\n  }, deps);\n  var update = result[1];\n\n  result[1] = function (propsArg) {\n    var reverse = is.obj(propsArg) && propsArg.reverse;\n    return update(function (i, ctrl) {\n      var props = getProps(propsArg, i, ctrl);\n      var parent = ctrls[i + (reverse ? 1 : -1)];\n      if (parent) props.to = parent.springs;\n      return props;\n    });\n  };\n\n  return propsFn ? result : result[0];\n}\n/** This transition is being mounted */\n\n\nvar MOUNT = 0;\n/** This transition is entering or has entered */\n\nvar ENTER = 1;\n/** This transition had its animations updated */\n\nvar UPDATE = 2;\n/** This transition will expire after animating */\n\nvar LEAVE = 3;\n\nfunction getKeys(items, _ref) {\n  var key = _ref.key,\n      _ref$keys = _ref.keys,\n      keys = _ref$keys === void 0 ? key : _ref$keys;\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nfunction useTransition(data, props, deps) {\n  var ref = props.ref,\n      reset = props.reset,\n      sort = props.sort,\n      _props$trail = props.trail,\n      trail = _props$trail === void 0 ? 0 : _props$trail,\n      _props$expires = props.expires,\n      expires = _props$expires === void 0 ? Infinity : _props$expires; // Every item has its own transition.\n\n  var items = toArray(data);\n  var transitions = []; // Keys help with reusing transitions between renders.\n  // The `key` prop can be undefined (which means the items themselves are used\n  // as keys), or a function (which maps each item to its key), or an array of\n  // keys (which are assigned to each item by index).\n\n  var keys = getKeys(items, props); // The \"onRest\" callbacks need a ref to the latest transitions.\n\n  var usedTransitions = useRef(null);\n  var prevTransitions = usedTransitions.current;\n  useIsomorphicLayoutEffect(function () {\n    usedTransitions.current = transitions;\n  }); // Destroy all transitions on dismount.\n\n  useOnce(function () {\n    return function () {\n      return each(usedTransitions.current, function (t) {\n        if (t.expiresBy != null) {\n          clearTimeout(t.expirationId);\n        }\n\n        t.ctrl.dispose();\n      });\n    };\n  }); // Map old indices to new indices.\n\n  var reused = [];\n  if (prevTransitions && !reset) each(prevTransitions, function (t, i) {\n    // Expired transitions are not rendered.\n    if (t.expiresBy != null) {\n      clearTimeout(t.expirationId);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  }); // Mount new items with fresh transitions.\n\n  each(items, function (item, i) {\n    transitions[i] || (transitions[i] = {\n      key: keys[i],\n      item: item,\n      phase: MOUNT,\n      ctrl: new Controller()\n    });\n  }); // Update the item of any transition whose key still exists,\n  // and ensure leaving transitions are rendered until they finish.\n\n  if (reused.length) {\n    var i = -1;\n    each(reused, function (keyIndex, prevIndex) {\n      var t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = _extends({}, t, {\n          item: items[keyIndex]\n        });\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort(function (a, b) {\n      return sort(a.item, b.item);\n    });\n  } // Track cumulative delay for the \"trail\" prop.\n\n\n  var delay = -trail; // Expired transitions use this to dismount.\n\n  var forceUpdate = useForceUpdate();\n  var defaultProps = {};\n  each(DEFAULT_PROPS, function (prop) {\n    if (/function|object/.test(typeof props[prop])) {\n      defaultProps[prop] = props[prop];\n    }\n  }); // Generate changes to apply in useEffect.\n\n  var changes = new Map();\n  each(transitions, function (t, i) {\n    var to;\n    var from;\n    var phase;\n\n    if (t.phase == MOUNT) {\n      to = props.enter;\n      phase = ENTER; // The \"initial\" prop is only used on first render. It always overrides\n      // the \"from\" prop when defined, and it makes \"enter\" instant when null.\n\n      from = props.initial;\n\n      if (is.und(from) || prevTransitions && !reset) {\n        from = props.from;\n      }\n    } else {\n      var isLeave = keys.indexOf(t.key) < 0;\n\n      if (t.phase < LEAVE) {\n        if (isLeave) {\n          to = props.leave;\n          phase = LEAVE;\n        } else if (to = props.update) {\n          phase = UPDATE;\n        } else return;\n      } else if (!isLeave) {\n        to = props.enter;\n        phase = ENTER;\n      } else return;\n    } // The payload is used to update the spring props once the current render is committed.\n\n\n    var payload = _extends({}, defaultProps, {\n      // When \"to\" is a function, it can return (1) an array of \"useSpring\" props,\n      // (2) an async function, or (3) an object with any \"useSpring\" props.\n      to: to = callProp(to, t.item, i),\n      from: callProp(from, t.item, i),\n      delay: delay += trail,\n      config: callProp(props.config || defaultProps.config, t.item, i)\n    }, is.obj(to) && interpolateTo(to));\n\n    var onRest = payload.onRest;\n\n    payload.onRest = function (result) {\n      if (is.fun(onRest)) {\n        onRest(result);\n      }\n\n      if (t.phase == LEAVE && t.ctrl.idle) {\n        t.expiresBy = now() + expires;\n\n        if (expires <= 0) {\n          forceUpdate();\n        } else {\n          // Postpone dismounts while other controllers are active.\n          var _transitions = usedTransitions.current;\n\n          if (_transitions.every(function (t) {\n            return t.ctrl.idle;\n          })) {\n            forceUpdate();\n          } // When `expires` is infinite, postpone dismount until next render.\n          else if (expires < Infinity) {\n              t.expirationId = setTimeout(forceUpdate, expires);\n            }\n        }\n      }\n    };\n\n    var change = {\n      phase: phase\n    };\n    changes.set(t, change); // To ensure all Animated nodes exist during render,\n    // the payload must be applied immediately for new items.\n\n    if (t.phase > MOUNT) {\n      change.payload = payload;\n    } else {\n      t.ctrl.update(payload);\n    }\n  });\n  var api = useMemo$1(function () {\n    return {\n      get controllers() {\n        return usedTransitions.current.map(function (t) {\n          return t.ctrl;\n        });\n      },\n\n      update: function update(props) {\n        each(usedTransitions.current, function (t, i) {\n          return t.ctrl.update(is.fun(props) ? props(i, t.ctrl) : is.arr(props) ? props[i] : props);\n        });\n        return api;\n      },\n      start: function start() {\n        var transitions, results;\n        return _regeneratorRuntime.async(function start$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                transitions = usedTransitions.current;\n                _context7.next = 3;\n                return _regeneratorRuntime.awrap(Promise.all(transitions.map(function (t) {\n                  return t.ctrl.start();\n                })));\n\n              case 3:\n                results = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  value: results.map(function (result) {\n                    return result.value;\n                  }),\n                  finished: results.every(function (result) {\n                    return result.finished;\n                  })\n                });\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        });\n      },\n      stop: function stop(keys) {\n        return each(usedTransitions.current, function (t) {\n          return t.ctrl.stop(keys);\n        });\n      }\n    };\n  }, []);\n  useImperativeHandle(ref, function () {\n    return api;\n  });\n  useIsomorphicLayoutEffect(function () {\n    each(changes, function (_ref2, t) {\n      var phase = _ref2.phase,\n          payload = _ref2.payload;\n      t.phase = phase;\n      if (payload) t.ctrl.update(payload);\n      if (!ref) t.ctrl.start();\n    });\n  }, reset ? void 0 : deps);\n  return function (render) {\n    return transitions.map(function (t) {\n      var elem = render(t.ctrl.springs, t.item, t);\n      return elem && elem.type ? React.createElement(elem.type, Object.assign({}, elem.props, {\n        key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n        ref: elem.ref\n      })) : elem;\n    });\n  };\n}\n\nfunction Spring(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  return children(useSpring(props));\n}\n\nfunction Trail(_ref2) {\n  var items = _ref2.items,\n      children = _ref2.children,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"items\", \"children\"]);\n\n  var trails = useTrail(items.length, props);\n  return items.map(function (item, index) {\n    var result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nfunction Transition(_ref3) {\n  var items = _ref3.items,\n      children = _ref3.children,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"items\", \"children\"]);\n\n  return useTransition(items, props)(children);\n}\n/** Map the value of one or more dependencies */\n\n\nvar to = function to(source) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return new Into(source, args);\n};\n/** @deprecated Use the `to` export instead */\n\n\nvar interpolate = function interpolate(source) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  return deprecateInterpolate(), new Into(source, args);\n};\n\nvar FrameLoop =\n/*#__PURE__*/\nfunction () {\n  function FrameLoop(_temp) {\n    var _this8 = this;\n\n    _classCallCheck(this, FrameLoop);\n\n    var _ref = _temp === void 0 ? {} : _temp,\n        update = _ref.update,\n        requestFrame = _ref.requestFrame;\n    /**\r\n     * The animated springs\r\n     */\n\n\n    this.springs = [];\n    /**\r\n     * True when at least one spring is animating.\r\n     */\n\n    this.active = false;\n    /** Equals true when a frame is being processed. */\n\n    this.updating = false;\n    /** Equals true when writing to native attributes. */\n\n    this.writing = false; // These queues are swapped at the end of every frame,\n    // after the current queue is drained.\n\n    this._queues = [new Set(), new Set()];\n    /** `onWrite` callbacks are flushed on every frame, after `onFrame` callbacks are flushed. */\n\n    this._writes = new Set();\n\n    this._requestFrame = // The global `requestAnimationFrame` must be dereferenced to avoid \"Illegal invocation\" errors\n    requestFrame || function (fn) {\n      return (0, requestAnimationFrame)(fn);\n    };\n\n    this.update = update && update.bind(this) || function (time) {\n      if (!_this8.active) {\n        return false;\n      }\n\n      if (is.und(time)) {\n        time = performanceNow();\n      }\n\n      var dt = time - _this8.lastTime;\n\n      if (dt > 0) {\n        // http://gafferongames.com/game-physics/fix-your-timestep/\n        if (dt > 64) dt = 64;\n        _this8.updating = true;\n        var springs = _this8.springs;\n        if (springs.length) _toConsumableArray(springs).forEach(function (spring) {\n          spring.idle || _this8.advance(dt, spring);\n        }); // Notify frame listeners.\n\n        var queues = _this8._queues;\n        var queue = queues[0];\n\n        if (queue.size) {\n          // Run and clear the queue.\n          queue.forEach(function (onFrame) {\n            return onFrame();\n          });\n          queue.clear(); // Swap the queues.\n\n          queues[0] = queues[1];\n          queues[1] = queue;\n        }\n\n        var writes = _this8._writes;\n\n        if (writes.size) {\n          _this8.writing = true;\n          writes.forEach(function (write) {\n            return write(time);\n          });\n          _this8.writing = false;\n          writes.clear();\n        }\n\n        _this8.updating = false;\n\n        if (!_this8.springs.length) {\n          return _this8.active = false;\n        }\n      }\n\n      _this8.lastTime = time;\n\n      _this8._requestFrame(_this8.update);\n\n      return true;\n    };\n  }\n  /**\r\n   * Schedule a function to run at the end of the current frame,\r\n   * after all springs have been updated.\r\n   *\r\n   * Pass `true` as the 2nd argument to run at the end of the **next** frame.\r\n   */\n\n\n  _createClass(FrameLoop, [{\n    key: \"onFrame\",\n    value: function onFrame(cb, next) {\n      this._queues[next && this.updating ? 1 : 0].add(cb);\n\n      this._start();\n    }\n    /**\r\n     * Schedule a function run at the end of the current frame,\r\n     * after all `onFrame` callbacks have been called.\r\n     *\r\n     * Calling `onWrite` from inside an `onWrite` callback simply\r\n     * calls the nested write immediately.\r\n     */\n\n  }, {\n    key: \"onWrite\",\n    value: function onWrite(cb) {\n      if (this.writing) {\n        cb(this.lastTime);\n      } else {\n        this._writes.add(cb);\n      }\n    }\n    /**\r\n     * Start animating the given spring.\r\n     *\r\n     * Beware: Never `start` the same spring twice (without `stop` between).\r\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(spring) {\n      var springs = this.springs;\n      var i = springs.findIndex(function (s) {\n        return s.priority > spring.priority;\n      });\n      if (i < 0) i = springs.length;\n      springs.splice(i, 0, spring);\n\n      this._start();\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      if (!this.active) {\n        this.active = true;\n        this.lastTime = performanceNow();\n\n        this._requestFrame(this.update);\n      }\n    }\n    /**\r\n     * Stop animating the given spring\r\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(spring) {\n      var springs = this.springs;\n      var i = springs.indexOf(spring);\n      if (~i) springs.splice(i, 1);\n      return this;\n    }\n    /**\r\n     * Advance an animation forward one frame.\r\n     */\n\n  }, {\n    key: \"advance\",\n    value: function advance(dt, spring) {\n      var idle = true;\n      var changed = false;\n      var anim = spring.animation;\n      var parent = isFluidValue(anim.to) && anim.to;\n      var payload = isAnimationValue(parent) && parent.node.getPayload();\n      anim.values.forEach(function (node, i) {\n        if (node.done) return;\n        var to = payload ? payload[i].lastPosition : parent ? toArray(parent.get())[i] : anim.toValues[i]; // Parent springs must finish before their children can.\n\n        var canFinish = !payload || payload[i].done; // Jump to end value for immediate animations.\n\n        if (anim.immediate) {\n          node.done = canFinish;\n\n          if (node.setValue(to)) {\n            changed = true;\n          }\n\n          return;\n        }\n\n        var config = anim.config; // Loose springs never move.\n\n        if (config.tension == 0) {\n          node.done = true;\n          return;\n        }\n\n        var elapsed = node.elapsedTime += dt;\n        var from = anim.fromValues[i];\n        var v0 = node.v0 != null ? node.v0 : node.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n        var position = node.lastPosition;\n        var velocity;\n        var finished; // Duration easing\n\n        if (!is.und(config.duration)) {\n          var p = config.progress;\n          if (config.duration <= 0) p = 1;else p += (1 - p) * Math.min(1, elapsed / config.duration);\n          position = from + config.easing(p) * (to - from);\n          velocity = (position - node.lastPosition) / dt;\n          finished = p == 1;\n        } // Decay easing\n        else if (config.decay) {\n            var decay = config.decay === true ? 0.998 : config.decay;\n            var e = Math.exp(-(1 - decay) * elapsed);\n            position = from + v0 / (1 - decay) * (1 - e); // derivative of position\n\n            velocity = v0 * e;\n            finished = Math.abs(node.lastPosition - position) < 0.1;\n            if (finished) to = position;\n          } // Spring easing\n          else {\n              velocity = node.lastVelocity == null ? v0 : node.lastVelocity;\n              /** The smallest distance from a value before being treated like said value. */\n\n              var precision = config.precision || (from == to ? 0.005 : Math.min(1, Math.abs(to - from) * 0.001));\n              /** The velocity at which movement is essentially none */\n\n              var restVelocity = config.restVelocity || precision; // Bouncing is opt-in (not to be confused with overshooting)\n\n              var bounceFactor = config.clamp ? 0 : config.bounce;\n              var canBounce = !is.und(bounceFactor);\n              /** When `true`, the value is increasing over time */\n\n              var isGrowing = from == to ? node.v0 > 0 : from < to;\n              /** When `true`, the velocity is considered moving */\n\n              var isMoving;\n              /** When `true`, the velocity is being deflected or clamped */\n\n              var isBouncing = false;\n              var step = 0.05 / config.w0;\n              var numSteps = Math.ceil(dt / step);\n\n              for (var n = 0; n < numSteps; ++n) {\n                isMoving = Math.abs(velocity) > restVelocity;\n\n                if (!isMoving) {\n                  finished = Math.abs(to - position) <= precision;\n\n                  if (finished) {\n                    break;\n                  }\n                }\n\n                if (canBounce) {\n                  isBouncing = position == to || position > to == isGrowing; // Invert the velocity with a magnitude, or clamp it.\n\n                  if (isBouncing) {\n                    velocity = -velocity * bounceFactor;\n                    position = to;\n                  }\n                }\n\n                var springForce = -config.tension * 0.000001 * (position - to);\n                var dampingForce = -config.friction * 0.001 * velocity;\n                var acceleration = (springForce + dampingForce) / config.mass; // pt/ms^2\n\n                velocity = velocity + acceleration * step; // pt/ms\n\n                position = position + velocity * step;\n              }\n            }\n\n        if (Number.isNaN(position)) {\n          throw Error(\"Found NaN value while advancing \\\"\".concat(spring.key, \"\\\" animation\"));\n        }\n\n        if (finished && canFinish) {\n          node.done = true;\n        } else {\n          idle = false;\n        }\n\n        node.lastVelocity = velocity;\n\n        if (node.setValue(position, config.round)) {\n          changed = true;\n        }\n      });\n      spring.onFrame(idle, changed);\n    }\n  }]);\n\n  return FrameLoop;\n}();\n\nGlobals.assign({\n  frameLoop: new FrameLoop(),\n  createStringInterpolator: createStringInterpolator$1,\n  applyAnimatedValues: function applyAnimatedValues() {\n    return false;\n  }\n});\n/** Advance all animations forward one frame */\n\nvar update = function update() {\n  return Globals.frameLoop.update();\n};\n\nexport { Controller, FrameLoop, Spring, SpringValue, Trail, Transition, config, interpolate, to, update, useChain, useSpring, useSprings, useTrail, useTransition };","map":null,"metadata":{},"sourceType":"module"}