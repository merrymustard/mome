{"code":"import * as React from \"react\";\r\nimport { disablePageScroll, enablePageScroll } from \"scroll-lock\";\r\nfunction useScrollLock(enabled, ref) {\r\n    if (enabled === void 0) { enabled = true; }\r\n    var disabledRef = React.useRef(false);\r\n    // scroll-lock uses an internal queue. we need to ensure that we only enable\r\n    // scrolling here if we have already disabled scrolling.\r\n    React.useEffect(function () {\r\n        if (enabled && !disabledRef.current) {\r\n            disablePageScroll(ref ? ref.current : undefined);\r\n            disabledRef.current = true;\r\n        }\r\n        return function () {\r\n            if (disabledRef.current) {\r\n                enablePageScroll(ref ? ref.current : undefined);\r\n                disabledRef.current = false;\r\n            }\r\n        };\r\n    }, [enabled, ref, disabledRef]);\r\n}\r\nexport default useScrollLock;\r\n","dts":{"name":"/Users/bmcmahen/Web/use-scroll-lock/index.d.ts","writeByteOrderMark":false,"text":"import * as React from \"react\";\r\ndeclare function useScrollLock(enabled?: boolean, ref?: React.RefObject<HTMLElement>): void;\r\nexport default useScrollLock;\r\n"}}
