import { View, Text, Image, StyleSheet } from 'react-native';
import { each, isFluidValue, Globals, is } from '@react-spring/shared';
import { AnimatedObject, extendAnimated, withAnimated, AnimatedStyle } from '@react-spring/animated';
import { createStringInterpolator } from '@react-spring/shared/stringInterpolation';
import colorNames from '@react-spring/shared/colors';
export * from '@react-spring/core';

class AnimatedTransform extends AnimatedObject {
  constructor(source) {
    super(source);
  }

  getValue() {
    return this.source ? this.source.map(source => {
      const transform = {};
      each(source, (source, key) => {
        transform[key] = isFluidValue(source) ? source.get() : source;
      });
      return transform;
    }) : [];
  }

  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }

  _makePayload(source) {
    if (!source) return [];
    const payload = new Set();
    each(source, transform => each(transform, this._addToPayload, payload));
    return Array.from(payload);
  }

}

const elements = {
  View: View,
  Text,
  Image
};
const animated = extendAnimated(withAnimated, Object.values(elements));

Globals.assign({
  defaultElement: View,
  colorNames,
  createStringInterpolator,
  applyAnimatedValues: (instance, props) => instance.setNativeProps ? instance.setNativeProps(props) : false,
  createAnimatedTransform: transform => new AnimatedTransform(transform),

  createAnimatedStyle(styles) {
    styles = StyleSheet.flatten(styles);

    if (is.obj(styles.shadowOffset)) {
      styles.shadowOffset = new AnimatedObject(styles.shadowOffset);
    }

    return new AnimatedStyle(styles);
  }

});

export { animated as a, animated };
//# sourceMappingURL=index.js.map
