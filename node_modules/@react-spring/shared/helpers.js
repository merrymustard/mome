"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var G = __importStar(require("./globals"));
exports.FluidType = '__$FluidType';
/** Let the given object be observed by any `FluidObserver` */
exports.makeFluidValue = function (value) {
    return Object.defineProperty(value, exports.FluidType, { value: 1, writable: true });
};
exports.isFluidValue = function (value) {
    return (value && value[exports.FluidType]) > 0;
};
exports.defineHidden = function (obj, key, value) {
    return Object.defineProperty(obj, key, { value: value, writable: true, configurable: true });
};
exports.is = {
    arr: Array.isArray,
    obj: function (a) {
        return !!a && a.constructor.name === 'Object';
    },
    fun: function (a) { return typeof a === 'function'; },
    str: function (a) { return typeof a === 'string'; },
    num: function (a) { return typeof a === 'number'; },
    und: function (a) { return a === undefined; },
};
/** Compare animatable values */
function isEqual(a, b) {
    if (exports.is.arr(a)) {
        if (!exports.is.arr(b) || a.length !== b.length)
            return false;
        for (var i = 0; i < a.length; i++) {
            if (a[i] !== b[i])
                return false;
        }
        return true;
    }
    return a === b;
}
exports.isEqual = isEqual;
// Not all strings can be animated (eg: {display: "none"})
exports.needsInterpolation = function (value) {
    return exports.is.str(value) &&
        (value[0] == '#' ||
            /\d/.test(value) ||
            !!(G.colorNames && G.colorNames[value]));
};
/** An unsafe object/array/set iterator that allows for better minification */
exports.each = function (obj, cb, ctx) {
    if (exports.is.fun(obj.forEach)) {
        obj.forEach(cb, ctx);
    }
    else {
        Object.keys(obj).forEach(function (key) { return cb.call(ctx, obj[key], key); });
    }
};
exports.toArray = function (a) {
    return exports.is.und(a) ? [] : exports.is.arr(a) ? a : [a];
};
exports.useOnce = function (effect) { return react_1.useEffect(effect, []); };
exports.useForceUpdate = function () { return react_1.useReducer(function () { return ({}); }, 0)[1]; };
/** Use a value from the previous render */
function usePrev(value) {
    var prevRef = react_1.useRef(undefined);
    react_1.useEffect(function () {
        prevRef.current = value;
    });
    return prevRef.current;
}
exports.usePrev = usePrev;
/**
 * React calls `console.warn` when using `useLayoutEffect` on the server.
 * To get around it, we can conditionally `useEffect` on the server (no-op) and
 * `useLayoutEffect` on the client.
 */
exports.useIsomorphicLayoutEffect = typeof window !== 'undefined' &&
    typeof window.document !== 'undefined' &&
    typeof window.document.createElement !== 'undefined'
    ? react_1.useLayoutEffect
    : react_1.useEffect;
//# sourceMappingURL=helpers.js.map