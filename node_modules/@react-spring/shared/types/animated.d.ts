/** @internal A value that changes over time (possibly every frame) */
export interface FluidValue<T = any> {
    get: () => T;
    priority?: number;
    addChild: (child: FluidObserver) => void;
    removeChild: (child: FluidObserver) => void;
}
/** @internal An object that observes a `FluidValue` over time */
export interface FluidObserver<T = any> {
    /** An observed `FluidValue` had its value changed */
    onParentChange(value: T, idle: boolean, parent: FluidValue<T>): void;
    /** An observed `FluidValue` had its priority changed */
    onParentPriorityChange(priority: number, parent: FluidValue<T>): void;
}
/** Add the `FluidValue` type to every property */
export declare type FluidProps<T> = T extends object ? {
    [P in keyof T]: T[P] | FluidValue<T[P]>;
} : unknown;
/** These types can be animated */
export declare type Animatable<T = any> = T extends number ? number : T extends string ? string : T extends ReadonlyArray<number | string> ? Array<number | string> extends T ? ReadonlyArray<number | string> : {
    [P in keyof T]: Animatable<T[P]>;
} : never;
export interface FrameRequestCallback {
    (time?: number): void;
}
