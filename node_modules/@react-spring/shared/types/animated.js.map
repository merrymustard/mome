{"version":3,"file":"animated.js","sourceRoot":"","sources":["../../src/types/animated.ts"],"names":[],"mappings":"","sourcesContent":["/** @internal A value that changes over time (possibly every frame) */\nexport interface FluidValue<T = any> {\n  get: () => T\n  priority?: number\n  addChild: (child: FluidObserver) => void\n  removeChild: (child: FluidObserver) => void\n}\n\n/** @internal An object that observes a `FluidValue` over time */\nexport interface FluidObserver<T = any> {\n  /** An observed `FluidValue` had its value changed */\n  onParentChange(value: T, idle: boolean, parent: FluidValue<T>): void\n  /** An observed `FluidValue` had its priority changed */\n  onParentPriorityChange(priority: number, parent: FluidValue<T>): void\n}\n\n/** Add the `FluidValue` type to every property */\nexport type FluidProps<T> = T extends object\n  ? { [P in keyof T]: T[P] | FluidValue<T[P]> }\n  : unknown\n\n/** These types can be animated */\nexport type Animatable<T = any> = T extends number\n  ? number\n  : T extends string\n  ? string\n  : T extends ReadonlyArray<number | string>\n  ? Array<number | string> extends T // When true, T is not a tuple\n    ? ReadonlyArray<number | string>\n    : { [P in keyof T]: Animatable<T[P]> }\n  : never\n\nexport interface FrameRequestCallback {\n  (time?: number): void\n}\n"]}