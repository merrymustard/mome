{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport GestureView from \"react-gesture-view\";\r\nimport { ArrowRight, ArrowLeft } from \"./Icons\";\r\nimport { Indicators } from \"./Indicators\";\r\nexport function Gallery(_a) {\r\n    var index = _a.index, onRequestChange = _a.onRequestChange, _b = _a.enableKeyboard, enableKeyboard = _b === void 0 ? true : _b, _c = _a.enableIndicators, enableIndicators = _c === void 0 ? true : _c, _d = _a.enableControls, enableControls = _d === void 0 ? true : _d, children = _a.children, other = tslib_1.__rest(_a, [\"index\", \"onRequestChange\", \"enableKeyboard\", \"enableIndicators\", \"enableControls\", \"children\"]);\r\n    function onKeyDown(e) {\r\n        // left\r\n        if (e.keyCode === 37) {\r\n            if (index > 0) {\r\n                onRequestChange(index - 1);\r\n                return true;\r\n            }\r\n            // right\r\n        }\r\n        else if (e.keyCode === 39) {\r\n            if (index < totalChildren - 1) {\r\n                onRequestChange(index + 1);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    React.useEffect(function () {\r\n        if (enableKeyboard) {\r\n            window.addEventListener(\"keydown\", onKeyDown);\r\n        }\r\n        return function () { return window.removeEventListener(\"keydown\", onKeyDown); };\r\n    }, [index]);\r\n    var totalChildren = React.Children.count(children);\r\n    var hasPrev = index > 0;\r\n    var hasNext = index < totalChildren - 1;\r\n    var timerRef = React.useRef(null);\r\n    var _e = React.useState(false), showControls = _e[0], setShowControls = _e[1];\r\n    var _f = React.useState(false), hover = _f[0], setHover = _f[1];\r\n    /**\r\n     * Enable 'hover' based controls\r\n     */\r\n    function onMouseMove() {\r\n        if (!showControls) {\r\n            setShowControls(true);\r\n        }\r\n        if (timerRef.current) {\r\n            clearTimeout(timerRef.current);\r\n        }\r\n        timerRef.current = setTimeout(function () {\r\n            setShowControls(false);\r\n        }, 2000);\r\n        return function () {\r\n            clearTimeout(timerRef.current);\r\n        };\r\n    }\r\n    function onEnter() {\r\n        setHover(true);\r\n    }\r\n    function onLeave() {\r\n        setHover(false);\r\n    }\r\n    return (React.createElement(\"div\", tslib_1.__assign({ onMouseMove: onMouseMove, className: \"GestureGallery\", style: {\r\n            position: \"relative\",\r\n            width: \"100%\",\r\n            height: \"100%\"\r\n        } }, other),\r\n        React.createElement(GestureView, { enableMouse: true, focusOnChange: true, style: {\r\n                width: \"100%\",\r\n                height: \"100%\"\r\n            }, value: index, onRequestChange: onRequestChange, lazyLoad: true, onSetLazy: function (i) {\r\n                var indexes = [i];\r\n                if (i > 0) {\r\n                    indexes.unshift(i - 1);\r\n                }\r\n                if (i < totalChildren) {\r\n                    indexes.push(i + 1);\r\n                }\r\n                return indexes;\r\n            } }, children),\r\n        enableControls && (React.createElement(React.Fragment, null,\r\n            React.createElement(NavigationArrow, { \"aria-label\": \"Show previous image\", hidden: !hasPrev, onEnter: onEnter, onLeave: onLeave, visible: (hover || showControls) && hasPrev, onClick: function () {\r\n                    onRequestChange(index - 1);\r\n                }, style: {\r\n                    left: \"1rem\"\r\n                } },\r\n                React.createElement(ArrowLeft, null)),\r\n            React.createElement(NavigationArrow, { \"aria-label\": \"Show next image\", hidden: !hasNext, visible: (hover || showControls) && hasNext, onEnter: onEnter, onLeave: onLeave, onClick: function () {\r\n                    onRequestChange(index + 1);\r\n                }, style: {\r\n                    right: \"1rem\"\r\n                } },\r\n                React.createElement(ArrowRight, null)))),\r\n        enableIndicators && (React.createElement(Indicators, { visible: true, count: totalChildren, index: index }))));\r\n}\r\nexport function NavigationArrow(_a) {\r\n    var hidden = _a.hidden, children = _a.children, label = _a[\"aria-label\"], onClick = _a.onClick, onEnter = _a.onEnter, onLeave = _a.onLeave, visible = _a.visible, style = _a.style;\r\n    return (React.createElement(\"div\", { className: \"Gallery__NavigationArrow\", \"aria-label\": label, \"aria-hidden\": hidden, onMouseEnter: onEnter, onMouseLeave: onLeave, style: tslib_1.__assign({ position: \"absolute\", top: \"50%\", transform: \"translateY(-50%)\", transition: \"opacity 0.5s ease\", opacity: visible ? 1 : 0, pointerEvents: visible ? \"auto\" : \"none\" }, style) },\r\n        React.createElement(\"button\", { onClick: onClick, style: {\r\n                width: \"50px\",\r\n                height: \"50px\",\r\n                borderRadius: \"50%\",\r\n                display: \"flex\",\r\n                background: \"rgba(255,255,255,0.7)\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                cursor: \"pointer\",\r\n                border: \"none\"\r\n            } }, children)));\r\n}\r\nexport function GalleryImage(_a) {\r\n    var src = _a.src, alt = _a.alt, srcSet = _a.srcSet, style = _a.style, _b = _a.objectFit, objectFit = _b === void 0 ? \"contain\" : _b, caption = _a.caption, other = tslib_1.__rest(_a, [\"src\", \"alt\", \"srcSet\", \"style\", \"objectFit\", \"caption\"]);\r\n    function onDragStart(e) {\r\n        e.preventDefault();\r\n    }\r\n    return (React.createElement(\"div\", tslib_1.__assign({ className: \"GalleryImage\", style: tslib_1.__assign({ flex: 1, display: \"flex\", overflow: \"hidden\", height: \"100%\" }, style) }, other),\r\n        React.createElement(\"img\", { style: {\r\n                maxWidth: \"100%\",\r\n                height: \"auto\",\r\n                margin: \"0 auto\",\r\n                display: \"block\",\r\n                maxHeight: \"100%\",\r\n                objectFit: objectFit\r\n            }, onDragStart: onDragStart, src: src, srcSet: srcSet, alt: alt })));\r\n}\r\n","dts":{"name":"/Users/bmcmahen/Web/react-gesture-gallery/GestureGallery.d.ts","writeByteOrderMark":false,"text":"import * as React from \"react\";\r\ninterface GalleryProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    index: number;\r\n    onRequestChange: (i: number) => void;\r\n    children: React.ReactNodeArray;\r\n    enableKeyboard?: boolean;\r\n    enableIndicators?: boolean;\r\n    enableControls?: boolean;\r\n}\r\nexport declare function Gallery({ index, onRequestChange, enableKeyboard, enableIndicators, enableControls, children, ...other }: GalleryProps): JSX.Element;\r\ninterface NavigationArrowProps {\r\n    visible: boolean;\r\n    style?: React.CSSProperties;\r\n    hidden: boolean;\r\n    onClick: () => void;\r\n    children: React.ReactNode;\r\n    \"aria-label\": string;\r\n    onEnter: () => void;\r\n    onLeave: () => void;\r\n}\r\nexport declare function NavigationArrow({ hidden, children, \"aria-label\": label, onClick, onEnter, onLeave, visible, style }: NavigationArrowProps): JSX.Element;\r\ninterface GalleryImageProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    src: string;\r\n    srcSet?: string;\r\n    caption?: string;\r\n    alt?: string;\r\n    objectFit?: \"cover\" | \"contain\";\r\n}\r\nexport declare function GalleryImage({ src, alt, srcSet, style, objectFit, caption, ...other }: GalleryImageProps): JSX.Element;\r\nexport {};\r\n"}}
